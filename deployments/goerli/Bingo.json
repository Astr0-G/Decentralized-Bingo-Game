{
  "address": "0xF7756666306c26c82DA2650DFeD9636Bc6676B61",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bingoTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "erorr__entryFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "error__drawsNotStared",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "error__exceedLimitPlayersInOneGame",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "error__gameStarted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "error__gameWinnerDrawed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "error__gameWinnerNotDrawed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "error__inGameAlready",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "error__notAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "error__notInGameOrClaimedRewards",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "error__winnerIsDRAWING",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "Claimed",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundCreated",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timeCreated",
          "type": "uint256"
        }
      ],
      "name": "Created",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameRound",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "playersNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[24]",
          "name": "winningNumbers",
          "type": "uint256[24]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bingoRound",
          "type": "uint256"
        }
      ],
      "name": "Drawed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundJoined",
          "type": "uint256"
        }
      ],
      "name": "Joined",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BingoToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betAmountForBINGO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameRound",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "checkWinner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameRound",
          "type": "uint256"
        }
      ],
      "name": "claimPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameRound",
          "type": "uint256"
        }
      ],
      "name": "drawWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameRoundNow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameRound",
          "type": "uint256"
        }
      ],
      "name": "getPlayerArray",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gameRound",
          "type": "uint256"
        }
      ],
      "name": "getPlayerGameBoard",
      "outputs": [
        {
          "internalType": "uint256[25]",
          "name": "",
          "type": "uint256[25]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameRound",
          "type": "uint256"
        }
      ],
      "name": "getRoundBingoResult",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256[24]",
          "name": "",
          "type": "uint256[24]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameRoundToJoin",
          "type": "uint256"
        }
      ],
      "name": "joinCurrentGameWithBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joinDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPlayerNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "returnBet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_joinDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_turnDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_betAmountForBINGO",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_returnBet",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_maxPlayerNum",
          "type": "uint256"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startNewGameWithBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "turnDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20ContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2dd12b72b7196dd995e85a4f93f9f32a131ae363f039fa5abcc0d7dec312908b",
  "receipt": {
    "to": null,
    "from": "0x84e8565F282b632d3AcC124af5D3BE6EDb86a1E8",
    "contractAddress": "0xF7756666306c26c82DA2650DFeD9636Bc6676B61",
    "transactionIndex": 99,
    "gasUsed": "3201770",
    "logsBloom": "0x
    "blockHash": "0xba805a4e21e00cfca5a08463e75a359d176579f515efcccb3af65ce4197c846b",
    "transactionHash": "0x2dd12b72b7196dd995e85a4f93f9f32a131ae363f039fa5abcc0d7dec312908b",
    "logs": [],
    "blockNumber": 8206622,
    "cumulativeGasUsed": "24905631",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x711601A3dc57377e6567c89dCD55CA05bAcA126B"
  ],
  "numDeployments": 2,
  "solcInputHash": "201fe726d426065ff6a0f5d0e4c62947",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bingoTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"erorr__entryFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"error__drawsNotStared\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"error__exceedLimitPlayersInOneGame\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"error__gameStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"error__gameWinnerDrawed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"error__gameWinnerNotDrawed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"error__inGameAlready\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"error__notAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"error__notInGameOrClaimedRewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"error__winnerIsDRAWING\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"Claimed\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundCreated\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timeCreated\",\"type\":\"uint256\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameRound\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"playersNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[24]\",\"name\":\"winningNumbers\",\"type\":\"uint256[24]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bingoRound\",\"type\":\"uint256\"}],\"name\":\"Drawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundJoined\",\"type\":\"uint256\"}],\"name\":\"Joined\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BingoToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betAmountForBINGO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameRound\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"checkWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameRound\",\"type\":\"uint256\"}],\"name\":\"claimPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameRound\",\"type\":\"uint256\"}],\"name\":\"drawWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameRoundNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameRound\",\"type\":\"uint256\"}],\"name\":\"getPlayerArray\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gameRound\",\"type\":\"uint256\"}],\"name\":\"getPlayerGameBoard\",\"outputs\":[{\"internalType\":\"uint256[25]\",\"name\":\"\",\"type\":\"uint256[25]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameRound\",\"type\":\"uint256\"}],\"name\":\"getRoundBingoResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256[24]\",\"name\":\"\",\"type\":\"uint256[24]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameRoundToJoin\",\"type\":\"uint256\"}],\"name\":\"joinCurrentGameWithBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPlayerNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnBet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_joinDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_turnDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_betAmountForBINGO\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_returnBet\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_maxPlayerNum\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNewGameWithBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20ContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Drawed(uint256,uint256,uint256[24],uint256)\":{\"details\":\"bingoRound == 0: no Bingo; bingoRound > 0: bingo in number of rounds\"}},\"kind\":\"dev\",\"methods\":{\"checkWinner(uint256,address)\":{\"params\":{\"_gameRound\":\"the round of game id\",\"_player\":\"player address of this round of game\"}},\"claimPrize(uint256)\":{\"details\":\"Normally player dont need to call this function, in case of draw function errorIf return bet is true, player needs to call this function to get the token back\",\"params\":{\"_gameRound\":\"the round of game id that player joined\"}},\"drawWinner(uint256)\":{\"details\":\"if one game is drawed, other players in this round\",\"params\":{\"_gameRound\":\"the round of game id that player joined\"}},\"getPlayerArray(uint256)\":{\"details\":\"This function is for frontend to get the players addresses in each round\",\"params\":{\"_gameRound\":\"the round of game id\"}},\"getPlayerGameBoard(address,uint256)\":{\"params\":{\"_gameRound\":\"the round of game id\",\"_player\":\"player address of this round of game\"}},\"getRoundBingoResult(uint256)\":{\"params\":{\"_gameRound\":\"the round of game id\"}},\"joinCurrentGameWithBet(uint256)\":{\"details\":\"Worst case of nobody has a bingo for 4 players are about 24356551 gas within 0 - 64 as numbers that this contract generated for bingo game with 24 winning numbers generated\",\"params\":{\"_gameRoundToJoin\":\"the round of game id\"}},\"withdrawToken(address,uint256,address)\":{\"details\":\"this function helps people who accidentally transfer ERC20 token to our contract, and also withdraw Bingo Token as revenue\"}},\"version\":1},\"userdoc\":{\"events\":{\"Claimed(address,uint256)\":{\"notice\":\"Event emit when a player claimed prize\"},\"Created(address,uint256,uint256)\":{\"notice\":\"Event emit when player create a new game\"},\"Drawed(uint256,uint256,uint256[24],uint256)\":{\"notice\":\"Event emit when a game is drawed\"},\"Joined(address,uint256)\":{\"notice\":\"Event emit when player joins a existing game\"}},\"kind\":\"user\",\"methods\":{\"BingoToken()\":{\"notice\":\"Each player pays an ERC20 entry fee, transferred on join\"},\"admin()\":{\"notice\":\"Admin can update the entry fee, join duration, and turn duration\"},\"betAmountForBINGO()\":{\"notice\":\"`betAmountForBINGO` sets to 1 token as default to save gas\"},\"checkWinner(uint256,address)\":{\"notice\":\"Check if player is the the winner of this game round, and returns bool with winning prize to claim\"},\"claimPrize(uint256)\":{\"notice\":\"Players claim prize if retrun bet is true or there is only one player in this game round\"},\"constructor\":{\"notice\":\"Deploying Bingo Token first before deploying this contract\"},\"drawWinner(uint256)\":{\"notice\":\"Players draw winner of this game round or claim prize\"},\"getPlayerArray(uint256)\":{\"notice\":\"Get players addresses array of this round\"},\"getPlayerGameBoard(address,uint256)\":{\"notice\":\"Get player game board numbers in a uint256 array\"},\"getRoundBingoResult(uint256)\":{\"notice\":\"Get the Bingo result of this round of game and winning numbers\"},\"joinCurrentGameWithBet(uint256)\":{\"notice\":\"Players join current game and generate their game board\"},\"joinDuration()\":{\"notice\":\"Games have a minimum join duration before start`joinDuration` sets to 180 seconds as default to save gas\"},\"maxPlayerNum()\":{\"notice\":\"maxPlayerNum sets the max player numbers in a game, default as 4 due to out of gas problem\"},\"returnBet()\":{\"notice\":\"returnBet sets the contract whether return player entry fee or not\"},\"setConfig(uint256,uint256,uint256,bool,uint256)\":{\"notice\":\"set config for the game, such as join durations, turn durations, bet amount for bingo game, returnBet boolean for if game returns no-winner game, max player numbers in one game\"},\"startNewGameWithBet()\":{\"notice\":\"player start a new with game board generated\"},\"turnDuration()\":{\"notice\":\"Games have a minimum turn duration between draws`turnDuration` sets to 180 seconds as default to save gas\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BingoGame.sol\":\"Bingo\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BingoGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.8;\\r\\n\\r\\n/// @title Bingo Game Smart Contract\\r\\n/// @author astro Ge\\r\\n/// @notice You can use this contract for playing bingo game\\r\\n\\r\\nimport \\\"./Interface/ICER20.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nerror erorr__entryFee();\\r\\nerror error__inGameAlready();\\r\\nerror error__drawsNotStared();\\r\\nerror error__winnerIsDRAWING();\\r\\nerror error__gameStarted();\\r\\nerror error__notInGameOrClaimedRewards();\\r\\nerror error__notAdmin();\\r\\nerror error__exceedLimitPlayersInOneGame();\\r\\nerror error__gameWinnerDrawed();\\r\\nerror error__gameWinnerNotDrawed();\\r\\n\\r\\ncontract Bingo {\\r\\n    /// @notice This is game stage for each player in each game round\\r\\n    enum gameStage {\\r\\n        BETTING,\\r\\n        DRAWING,\\r\\n        DARWED\\r\\n    }\\r\\n\\r\\n    /// @notice This is player struct in each game round\\r\\n    struct player {\\r\\n        gameStage stage;\\r\\n        uint256[25] gameBoard;\\r\\n        /// @notice Matched number will be set as 1 for function to know it matches, 0 means unmatch\\r\\n        mapping(uint256 => uint256) gameBoardMatchs;\\r\\n    }\\r\\n\\r\\n    struct gameRound {\\r\\n        /// @notice When one person calls function `drawWinnerOrClaimRewrads`, it will draw the winner of this round\\r\\n        bool drawing;\\r\\n        /// @notice If `winnerAnnounced` is true, other players don't have to draw instead of claiming their prize\\r\\n        bool winnerAnnounced;\\r\\n        uint256 startTime;\\r\\n        uint256 bingo;\\r\\n        /// @notice Support multiple players in a game\\r\\n        /// @notice If two or more players have their first bingo in the same round, they will share the prize pool\\r\\n        address[] winner;\\r\\n        address[] playersArray;\\r\\n        uint256[24] winningNumders;\\r\\n        mapping(address => player) players;\\r\\n    }\\r\\n\\r\\n    uint256 public gameRoundNow;\\r\\n    /// @notice Admin can update the entry fee, join duration, and turn duration\\r\\n    address public admin;\\r\\n    /// @notice Games have a minimum join duration before start\\r\\n    /// @notice `joinDuration` sets to 180 seconds as default to save gas\\r\\n    uint256 public joinDuration = 180;\\r\\n    /// @notice Games have a minimum turn duration between draws\\r\\n    /// @notice `turnDuration` sets to 180 seconds as default to save gas\\r\\n    uint256 public turnDuration = 180;\\r\\n    /// @notice Each player pays an ERC20 entry fee, transferred on join\\r\\n    address public BingoToken;\\r\\n    /// @notice `betAmountForBINGO` sets to 1 token as default to save gas\\r\\n    uint256 public betAmountForBINGO = 1000000000000000000;\\r\\n    /// @notice returnBet sets the contract whether return player entry fee or not\\r\\n    bool public returnBet;\\r\\n    /// @notice maxPlayerNum sets the max player numbers in a game, default as 4 due to out of gas problem\\r\\n    uint256 public maxPlayerNum = 4;\\r\\n\\r\\n    /// @notice Support multiple concurrent games\\r\\n    mapping(uint256 => gameRound) gameRounds;\\r\\n\\r\\n    /// @notice Event emit when player create a new game\\r\\n    event Created(\\r\\n        address indexed creator,\\r\\n        uint256 indexed roundCreated,\\r\\n        uint256 indexed timeCreated\\r\\n    );\\r\\n    /// @notice Event emit when player joins a existing game\\r\\n    event Joined(address indexed player, uint256 indexed roundJoined);\\r\\n    /// @notice Event emit when a game is drawed\\r\\n    /// @dev bingoRound == 0: no Bingo; bingoRound > 0: bingo in number of rounds\\r\\n    event Drawed(\\r\\n        uint256 indexed gameRound,\\r\\n        uint256 indexed playersNum,\\r\\n        uint256[24] winningNumbers,\\r\\n        uint256 bingoRound\\r\\n    );\\r\\n    /// @notice Event emit when a player claimed prize\\r\\n    event Claimed(address indexed player, uint256 indexed Claimed);\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        if (msg.sender != admin) revert error__notAdmin();\\r\\n        _;\\r\\n    }\\r\\n    /// @notice Only allowing one player to draw the winning numbers with time limit\\r\\n    modifier drawingWinnerCheck(uint256 _gameRound) {\\r\\n        if (block.timestamp < gameRounds[_gameRound].startTime + joinDuration + turnDuration)\\r\\n            revert error__drawsNotStared();\\r\\n        if (gameRounds[_gameRound].drawing) revert error__winnerIsDRAWING();\\r\\n        /// @notice Start drawing\\r\\n        gameRounds[_gameRound].drawing = true;\\r\\n        _;\\r\\n        /// @notice Stop drawing\\r\\n        gameRounds[_gameRound].drawing = false;\\r\\n    }\\r\\n\\r\\n    /// @notice Deploying Bingo Token first before deploying this contract\\r\\n    constructor(address _bingoTokenAddress) {\\r\\n        BingoToken = _bingoTokenAddress;\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    /// @notice player start a new with game board generated\\r\\n    function startNewGameWithBet() public {\\r\\n        /// @notice Send Bingo Token to this contract, and check transaction success\\r\\n        if (IERC20(BingoToken).transferFrom(msg.sender, address(this), betAmountForBINGO) != true)\\r\\n            revert erorr__entryFee();\\r\\n        /// @notice Make a new game round\\r\\n        unchecked {\\r\\n            ++gameRoundNow;\\r\\n        }\\r\\n        /// @notice Save game round Id into this function\\r\\n        uint256 gameRoundnow = gameRoundNow;\\r\\n        /// @notice Save game round start time\\r\\n        gameRounds[gameRoundnow].startTime = block.timestamp;\\r\\n        /// @notice Generating player game board for this game round\\r\\n        playerGenerateGameBoard(msg.sender, gameRoundnow);\\r\\n        emit Created(msg.sender, gameRoundnow, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /// @notice Players join current game and generate their game board\\r\\n    /// @param _gameRoundToJoin the round of game id\\r\\n    /// @dev Worst case of nobody has a bingo for 4 players are about 24356551 gas within 0 - 64 as numbers that this contract generated for bingo game with 24 winning numbers generated\\r\\n    function joinCurrentGameWithBet(uint256 _gameRoundToJoin) public {\\r\\n        /// @notice With 2 lines above being said, limit no more than 4 players in a game to limit out of gas problem\\r\\n        if (gameRounds[_gameRoundToJoin].playersArray.length + 1 > maxPlayerNum)\\r\\n            revert error__exceedLimitPlayersInOneGame();\\r\\n        (gameStage stageOfPlayer, uint256 roundStartedTimeWithDuration) = getRoundDetails(\\r\\n            _gameRoundToJoin,\\r\\n            msg.sender\\r\\n        );\\r\\n        /// @notice Player can join multiple game at the same time, but not in the same round\\r\\n        if (stageOfPlayer != gameStage.BETTING) revert error__inGameAlready();\\r\\n        /// @notice Players can not join the game after join duration\\r\\n        if (block.timestamp > roundStartedTimeWithDuration) revert error__gameStarted();\\r\\n        /// @notice Send Bingo Token to this contract, and check transaction success\\r\\n        if (IERC20(BingoToken).transferFrom(msg.sender, address(this), betAmountForBINGO) != true)\\r\\n            revert erorr__entryFee();\\r\\n        /// @notice Generating player game board for this game round\\r\\n        playerGenerateGameBoard(msg.sender, _gameRoundToJoin);\\r\\n    }\\r\\n\\r\\n    /// @notice Players draw winner of this game round or claim prize\\r\\n    /// @dev if one game is drawed, other players in this round\\r\\n    /// @param _gameRound the round of game id that player joined\\r\\n    function drawWinner(uint256 _gameRound) public drawingWinnerCheck(_gameRound) {\\r\\n        /// @notice Read bet amount to use for this function at beginning to save gas\\r\\n        /// @notice If winner is announced then distribute the prize to the caller\\r\\n        /// @dev This only be true when second time this function is called\\r\\n        if (gameRounds[_gameRound].winnerAnnounced == true) revert error__gameWinnerDrawed();\\r\\n        /// @notice Draw winner or winners, if two players achieved bingo in the same round, they will split the prize poll\\r\\n        /// @dev Drawing winner spend unbelievable gas amount, using a automation keeper to call this function could wave gas for player in real cases\\r\\n        /// @notice Read players's addresses to use for this function at beginning of drawing process to save gas\\r\\n        address[] memory playersArrays = gameRounds[_gameRound].playersArray;\\r\\n        /// @notice Init winningNumbers array now for event params\\r\\n        uint256[24] memory winningNumbers;\\r\\n        /// @notice if there are more than one player in the game, then drawing start\\r\\n        if (playersArrays.length > 1) {\\r\\n            uint256 BingoIndex = 24;\\r\\n            /// @notice Call `gameGenerateNumber` to generate winning numbers\\r\\n            /// @dev Will generate 24 winning numbers for players for full experience of Bingo game\\r\\n            winningNumbers = gameGenerateNumber(_gameRound);\\r\\n            /// @notice i: i is representing players index in this game round, loop from first player to the last player\\r\\n            /// @notice j: j is representing players first bingo index in this game round\\r\\n            /// @dev j: if there is a first bingo in any players game board, we set j + 1 for the loop limit to save gas\\r\\n            /// @notice k: k is representing players game board number index, loop from 0 - 24\\r\\n            uint256 i;\\r\\n            uint256 j;\\r\\n            uint256 k;\\r\\n            do {\\r\\n                j = 0;\\r\\n                do {\\r\\n                    k = 0;\\r\\n                    uint256[25] memory playerGameBoard = getPlayerGameBoard(\\r\\n                        playersArrays[i],\\r\\n                        _gameRound\\r\\n                    );\\r\\n                    do {\\r\\n                        /// @notice If winning number and one of the player game board matches, set the players game board matches mapping to be 1\\r\\n                        if (winningNumbers[j] == playerGameBoard[k]) {\\r\\n                            gameRounds[_gameRound].players[playersArrays[i]].gameBoardMatchs[\\r\\n                                k\\r\\n                            ] = 1;\\r\\n                        }\\r\\n                        /// @notice Skip center number\\r\\n                        if (k == 11) {\\r\\n                            unchecked {\\r\\n                                ++k;\\r\\n                            }\\r\\n                        }\\r\\n                        unchecked {\\r\\n                            ++k;\\r\\n                        }\\r\\n                        /// @notice When checking more than 5 numbers, check if this is a bingo or not\\r\\n                        if (k > 4) {\\r\\n                            /// @notice If bingo is true\\r\\n                            if (checkWinning(_gameRound, playersArrays[i])) {\\r\\n                                /// @notice set j to be bingo round + 1 to let other player check till this round to see if there are more than one winner in this game\\r\\n                                if (j == BingoIndex - 1) {\\r\\n                                    gameRounds[_gameRound].winner.push(playersArrays[i]);\\r\\n                                } else {\\r\\n                                    /// @notice If new bingo round is less than the first one, clean winner array and save this new winner\\r\\n                                    gameRounds[_gameRound].winner = new address[](0);\\r\\n                                    gameRounds[_gameRound].winner.push(playersArrays[i]);\\r\\n                                }\\r\\n                                unchecked {\\r\\n                                    BingoIndex = j + 1;\\r\\n                                }\\r\\n                                /// @notice Save bingo round number into contract\\r\\n                                gameRounds[_gameRound].bingo = j;\\r\\n                                console.log(\\r\\n                                    \\\"First Bingo in round\\\",\\r\\n                                    j,\\r\\n                                    \\\"for player address\\\",\\r\\n                                    playersArrays[i]\\r\\n                                );\\r\\n                                break;\\r\\n                            }\\r\\n                        }\\r\\n                    } while (k < 25);\\r\\n                    unchecked {\\r\\n                        ++j;\\r\\n                    }\\r\\n                } while (j < BingoIndex);\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            } while (i < playersArrays.length);\\r\\n            i = 0;\\r\\n            /// @notice Winner wins the pot of entry fees, transferred on win\\r\\n            do {\\r\\n                (bool a, uint256 b) = checkWinner(_gameRound, playersArrays[i]);\\r\\n                if (a) {\\r\\n                    IERC20(BingoToken).transfer(playersArrays[i], b);\\r\\n                    gameRounds[_gameRound].players[playersArrays[i]].stage = gameStage.DARWED;\\r\\n                    emit Claimed(playersArrays[i], b);\\r\\n                }\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            } while (i < playersArrays.length);\\r\\n        }\\r\\n        gameRounds[_gameRound].winnerAnnounced = true;\\r\\n        emit Drawed(\\r\\n            _gameRound,\\r\\n            playersArrays.length,\\r\\n            winningNumbers,\\r\\n            gameRounds[_gameRound].bingo\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Players claim prize if retrun bet is true or there is only one player in this game round\\r\\n    /// @dev Normally player dont need to call this function, in case of draw function error\\r\\n    /// @dev If return bet is true, player needs to call this function to get the token back\\r\\n    /// @param _gameRound the round of game id that player joined\\r\\n    function claimPrize(uint256 _gameRound) public drawingWinnerCheck(_gameRound) {\\r\\n        /// @notice Cheak if stage of player in this is DRAWING to let them draw or claim\\r\\n        if (gameRounds[_gameRound].players[msg.sender].stage != gameStage.DRAWING)\\r\\n            revert error__notInGameOrClaimedRewards();\\r\\n        /// @notice Read bet amount to use for this function at beginning to save gas\\r\\n        uint256 betAmount = betAmountForBINGO;\\r\\n        uint256 prizeToSend;\\r\\n        /// @notice If winner is announced then distribute the prize to the caller\\r\\n        /// @dev This only be true when second time this function is called\\r\\n        if (gameRounds[_gameRound].winnerAnnounced == false) revert error__gameWinnerNotDrawed();\\r\\n        /// @notice If there is one of more bingo achieved, check the prize and send to the winner\\r\\n        if (gameRounds[_gameRound].bingo > 0) {\\r\\n            prizeToSend = checkPrize(_gameRound, msg.sender);\\r\\n            if (prizeToSend > 0) {\\r\\n                IERC20(BingoToken).transfer(msg.sender, prizeToSend);\\r\\n            }\\r\\n            /// @dev Choosing by admin about sending back players bet fees, becuase house needs token as funds to balance out automation keepers gas spend, I chose not to send back token as house revenue\\r\\n        } else if (gameRounds[_gameRound].playersArray.length <= 1 || returnBet) {\\r\\n            /// @notice If there one player in a game refund Bingo Token player bet\\r\\n            /// @notice If there no bingo achieved, refund Bingo Token player bet\\r\\n            IERC20(BingoToken).transfer(msg.sender, betAmount);\\r\\n        }\\r\\n        gameRounds[_gameRound].players[msg.sender].stage = gameStage.DARWED;\\r\\n        emit Claimed(msg.sender, prizeToSend);\\r\\n    }\\r\\n\\r\\n    /// @notice Player generating game board when creating or joinning a game\\r\\n    /// @dev `joinCurrentGameWithBet` & `startNewGameWithBet` will call this internal function\\r\\n    /// @param _player player's address\\r\\n    /// @param _gameRound the round of game id\\r\\n    function playerGenerateGameBoard(address _player, uint256 _gameRound) internal {\\r\\n        /// @notice Change player's stage of this game round to DRAWING\\r\\n        gameRounds[_gameRound].players[_player].stage = gameStage.DRAWING;\\r\\n        /// @notice Save player's address to game round player array\\r\\n        gameRounds[_gameRound].playersArray.push(_player);\\r\\n        uint256 i;\\r\\n        /// @notice Make a memory array for generating game board numbers in this function\\r\\n        /// @dev Saving more gas compares to directly save numbers into contract each time\\r\\n        uint256[25] memory array;\\r\\n        /// @dev Generate random number, but could be replaced by on-chain services provider, such as Chainlink\\r\\n        bytes32 blockHashPrevious = blockhash(block.number - 1);\\r\\n        uint256 seed = uint256(blockHashPrevious);\\r\\n        uint256 randomNumber = uint256(keccak256(abi.encodePacked(seed, msg.sender)));\\r\\n        /// @dev Use do while and unchecked{} to save gas.\\r\\n        do {\\r\\n            /// @notice Check if the random number bigger than 64\\r\\n            /// @dev The reason why i choose 64 is because 256 will hardly get a bingo and spent a lot of gas without a winner\\r\\n            /// @dev We could definetly choose 256 if we insist\\r\\n            randomNumber = (randomNumber >> 6 > 0)\\r\\n                ? (randomNumber >> 6) % 64\\r\\n                : (uint256(keccak256(abi.encodePacked(seed, msg.sender, i)))) % 64;\\r\\n            /// @notice Save random number into memory array\\r\\n            array[i] = randomNumber;\\r\\n            /// @notice No need to save the center game borad number\\r\\n            if (i == 11) {\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        } while (i < 25);\\r\\n        /// @notice Save generated number into player game board\\r\\n        gameRounds[_gameRound].players[_player].gameBoard = array;\\r\\n        /// @notice Set player game board matches array[12] become matched\\r\\n        gameRounds[_gameRound].players[_player].gameBoardMatchs[12] = 1;\\r\\n        emit Joined(msg.sender, _gameRound);\\r\\n    }\\r\\n\\r\\n    /// @notice Game generating winning number of this game round\\r\\n    /// @dev `drawWinnerOrClaimPrize` will call this internal function\\r\\n    /// @param _gameRound the round of game id\\r\\n    function gameGenerateNumber(uint256 _gameRound) internal returns (uint256[24] memory) {\\r\\n        /// @notice Make a memory array for generating game board numbers in this function\\r\\n        /// @dev Saving more gas compares to directly save numbers into contract each time\\r\\n        /// @dev Choose 24 winning numbers between 0 - 63 is enough for a bingo to be true, and it is also be able to make player gameboard match all bingos\\r\\n        /// @dev Worst case of nobody has a bingo for five players are about 28000000 gas within 0 - 64 as numbers that this contract generated for bingo game with 24 winning numbers generated\\r\\n        /// @dev We could definetly choose more to make every game has a Bingo if we insist\\r\\n        uint256[24] memory array;\\r\\n        uint256 i;\\r\\n        /// @dev Generate random number, but could be replaced by on-chain services provider, such as Chainlink\\r\\n        bytes32 blockHashPrevious = blockhash(block.number - 1);\\r\\n        uint256 seed = uint256(blockHashPrevious);\\r\\n        uint256 randomNumber = uint256(keccak256(abi.encodePacked(seed, msg.sender)));\\r\\n        /// @dev Use do while and unchecked{} to save gas.\\r\\n        do {\\r\\n            /// @notice Check if the random number bigger than 64\\r\\n            /// @dev The reason why choose 64 is because 256 will hardly get a bingo and spent a lot of gas without a winner\\r\\n            /// @dev We could definetly choose 256 if we insist\\r\\n            randomNumber = (randomNumber >> 6 > 0)\\r\\n                ? (randomNumber >> 6) % 64\\r\\n                : (uint256(keccak256(abi.encodePacked(seed, msg.sender, i)))) % 64;\\r\\n            /// @notice Save random number into memory array\\r\\n            array[i] = randomNumber;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        } while (i < 24);\\r\\n        /// @notice Save winning numbers into contract\\r\\n        gameRounds[_gameRound].winningNumders = array;\\r\\n        return (array);\\r\\n    }\\r\\n\\r\\n    /// @notice Get players addresses array of this round\\r\\n    /// @dev This function is for frontend to get the players addresses in each round\\r\\n    /// @param _gameRound the round of game id\\r\\n    function getPlayerArray(uint256 _gameRound) public view returns (address[] memory) {\\r\\n        return (gameRounds[_gameRound].playersArray);\\r\\n    }\\r\\n\\r\\n    /// @notice get player stage of this round and timestamp right after join duration ends\\r\\n    /// @dev `joinCurrentGameWithBet` will call this internal function\\r\\n    /// @param _gameRound the round of game id\\r\\n    /// @param _player player address of this round of game\\r\\n    function getRoundDetails(\\r\\n        uint256 _gameRound,\\r\\n        address _player\\r\\n    ) internal view returns (gameStage, uint256) {\\r\\n        return (\\r\\n            gameRounds[_gameRound].players[_player].stage,\\r\\n            gameRounds[_gameRound].startTime + joinDuration\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Bingo result of this round of game and winning numbers\\r\\n    /// @param _gameRound the round of game id\\r\\n    function getRoundBingoResult(\\r\\n        uint256 _gameRound\\r\\n    ) public view returns (bool, uint256[24] memory) {\\r\\n        return (gameRounds[_gameRound].bingo > 0, gameRounds[_gameRound].winningNumders);\\r\\n    }\\r\\n\\r\\n    /// @notice Get player game board numbers in a uint256 array\\r\\n    /// @param _gameRound the round of game id\\r\\n    /// @param _player player address of this round of game\\r\\n    function getPlayerGameBoard(\\r\\n        address _player,\\r\\n        uint256 _gameRound\\r\\n    ) public view returns (uint256[25] memory) {\\r\\n        return (gameRounds[_gameRound].players[_player].gameBoard);\\r\\n    }\\r\\n\\r\\n    /// @notice Check prize for the player of this game round\\r\\n    /// @dev `claimPrize` and `checkWinner` will call this internal function\\r\\n    /// @param _gameRound the round of game id\\r\\n    /// @param _player player address of this round of game\\r\\n    function checkPrize(\\r\\n        uint256 _gameRound,\\r\\n        address _player\\r\\n    ) internal view returns (uint256 winningPrize) {\\r\\n        address[] memory winnners = gameRounds[_gameRound].winner;\\r\\n        uint256 i;\\r\\n        uint256 n;\\r\\n        do {\\r\\n            if (winnners[i] == _player) {\\r\\n                unchecked {\\r\\n                    n++;\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        } while (i < winnners.length);\\r\\n        /// @notice If there is more than one winnier, n will be equal to 1 and times betAmountForBINGO times numbers of players divided by winners number\\r\\n        return ((n * (betAmountForBINGO * (gameRounds[_gameRound].playersArray.length))) /\\r\\n            (winnners.length));\\r\\n    }\\r\\n\\r\\n    /// @notice Check if player is the the winner of this game round, and returns bool with winning prize to claim\\r\\n    /// @param _gameRound the round of game id\\r\\n    /// @param _player player address of this round of game\\r\\n    function checkWinner(uint256 _gameRound, address _player) public view returns (bool, uint256) {\\r\\n        address[] memory winnners = gameRounds[_gameRound].winner;\\r\\n        uint256 i;\\r\\n        if (winnners.length > 0) {\\r\\n            do {\\r\\n                if (winnners[i] == _player) {\\r\\n                    uint256 prize = checkPrize(_gameRound, _player);\\r\\n                    return (true, prize);\\r\\n                }\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            } while (i < winnners.length);\\r\\n            return (false, 0);\\r\\n        } else {\\r\\n            return (false, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Check if player game board matches and retrun bool\\r\\n    /// @dev `drawWinnerOrClaimPrize` will call this internal function\\r\\n    /// @param _gameRound the round of game id\\r\\n    /// @param _player player address of this round of game\\r\\n    function checkWinning(uint256 _gameRound, address _player) internal view returns (bool) {\\r\\n        uint256 i;\\r\\n        if (\\r\\n            gameRounds[_gameRound].players[_player].gameBoardMatchs[0] == 1 &&\\r\\n            gameRounds[_gameRound].players[_player].gameBoardMatchs[6] == 1 &&\\r\\n            gameRounds[_gameRound].players[_player].gameBoardMatchs[18] == 1 &&\\r\\n            gameRounds[_gameRound].players[_player].gameBoardMatchs[24] == 1\\r\\n        ) {\\r\\n            /// @notice BINGO in [1,0,0,0,0]\\r\\n            /// @notice          [0,1,0,0,0]\\r\\n            /// @notice          [0,0,1,0,0]\\r\\n            /// @notice          [0,0,0,1,0]\\r\\n            /// @notice          [0,0,0,0,1]\\r\\n            return (true);\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            gameRounds[_gameRound].players[_player].gameBoardMatchs[4] == 1 &&\\r\\n            gameRounds[_gameRound].players[_player].gameBoardMatchs[8] == 1 &&\\r\\n            gameRounds[_gameRound].players[_player].gameBoardMatchs[16] == 1 &&\\r\\n            gameRounds[_gameRound].players[_player].gameBoardMatchs[20] == 1\\r\\n        ) {\\r\\n            /// @notice BINGO in [0,0,0,0,1]\\r\\n            /// @notice          [0,0,0,1,0]\\r\\n            /// @notice          [0,0,1,0,0]\\r\\n            /// @notice          [0,1,0,0,0]\\r\\n            /// @notice          [1,0,0,0,0]\\r\\n            return (true);\\r\\n        }\\r\\n        do {\\r\\n            if (\\r\\n                gameRounds[_gameRound].players[_player].gameBoardMatchs[i * 5 + 0] == 1 &&\\r\\n                gameRounds[_gameRound].players[_player].gameBoardMatchs[i * 5 + 1] == 1 &&\\r\\n                gameRounds[_gameRound].players[_player].gameBoardMatchs[i * 5 + 2] == 1 &&\\r\\n                gameRounds[_gameRound].players[_player].gameBoardMatchs[i * 5 + 3] == 1 &&\\r\\n                gameRounds[_gameRound].players[_player].gameBoardMatchs[i * 5 + 4] == 1\\r\\n            ) {\\r\\n                /// @notice BINGO in [1,1,1,1,1] \\u2193\\r\\n                /// @notice          [0,0,0,0,0] \\u2193\\r\\n                /// @notice          [0,0,0,0,0] \\u2193\\r\\n                /// @notice          [0,0,0,0,0] \\u2193\\r\\n                /// @notice          [0,0,0,0,0] \\u2193\\r\\n                return (true);\\r\\n            } else if (\\r\\n                gameRounds[_gameRound].players[_player].gameBoardMatchs[0 + i] == 1 &&\\r\\n                gameRounds[_gameRound].players[_player].gameBoardMatchs[5 + i] == 1 &&\\r\\n                gameRounds[_gameRound].players[_player].gameBoardMatchs[10 + i] == 1 &&\\r\\n                gameRounds[_gameRound].players[_player].gameBoardMatchs[15 + i] == 1 &&\\r\\n                gameRounds[_gameRound].players[_player].gameBoardMatchs[20 + i] == 1\\r\\n            ) {\\r\\n                /// @notice           \\u2192 \\u2192 \\u2192 \\u2192 \\u2192\\r\\n                /// @notice BINGO in [1,0,0,0,0]\\r\\n                /// @notice          [1,0,0,0,0]\\r\\n                /// @notice          [1,0,0,0,0]\\r\\n                /// @notice          [1,0,0,0,0]\\r\\n                /// @notice          [1,0,0,0,0]\\r\\n                return (true);\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        } while (i < 5);\\r\\n\\r\\n        return (false);\\r\\n    }\\r\\n\\r\\n    /// @notice set config for the game, such as join durations, turn durations, bet amount for bingo game, returnBet boolean for if game returns no-winner game, max player numbers in one game\\r\\n    function setConfig(\\r\\n        uint256 _joinDuration,\\r\\n        uint256 _turnDuration,\\r\\n        uint256 _betAmountForBINGO,\\r\\n        bool _returnBet,\\r\\n        uint256 _maxPlayerNum\\r\\n    ) public onlyAdmin {\\r\\n        joinDuration = _joinDuration;\\r\\n        turnDuration = _turnDuration;\\r\\n        betAmountForBINGO = _betAmountForBINGO;\\r\\n        returnBet = _returnBet;\\r\\n        maxPlayerNum = _maxPlayerNum;\\r\\n    }\\r\\n\\r\\n    /// @dev this function helps people who accidentally transfer ERC20 token to our contract, and also withdraw Bingo Token as revenue\\r\\n    function withdrawToken(\\r\\n        address _erc20ContractAddress,\\r\\n        uint256 _amount,\\r\\n        address _to\\r\\n    ) external onlyAdmin {\\r\\n        IERC20(_erc20ContractAddress).approve(address(this), _amount);\\r\\n        bool callSuccess = IERC20(_erc20ContractAddress).transferFrom(address(this), _to, _amount);\\r\\n        require(callSuccess, \\\"Transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x008820c2f57356d9b824aea23054e7c077c3012589cef4d79d36345abd85ccd1\",\"license\":\"MIT\"},\"contracts/Interface/ICER20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x206e252911fb60d0d6a54fb657b64344c33fa237ddb8553aa668a24d1856a7c2\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260b460025560b4600355670de0b6b3a764000060055560046007553480156200002c57600080fd5b506040516200382538038062003825833981810160405281019062000052919062000145565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000177565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200010d82620000e0565b9050919050565b6200011f8162000100565b81146200012b57600080fd5b50565b6000815190506200013f8162000114565b92915050565b6000602082840312156200015e576200015d620000db565b5b60006200016e848285016200012e565b91505092915050565b61369e80620001876000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80634fbd239b116100a2578063884c0fe911610071578063884c0fe9146102bf57806395f5d1fd146102dd578063bdff7d881461030d578063d709815414610329578063f851a4401461034557610116565b80634fbd239b1461024b57806360b2a56a1461026957806362e838ef14610285578063744c552f146102a357610116565b806313b3da5d116100e957806313b3da5d14610191578063172bf854146101c2578063227b0354146101e057806327249ee8146102115780633ccdbb281461022f57610116565b8063050669171461011b57806307d8c565146101395780630b3ca74d146101695780631080274914610173575b600080fd5b610123610363565b6040516101309190612c11565b60405180910390f35b610153600480360381019061014e9190612c5d565b610369565b6040516101609190612d7a565b60405180910390f35b61017161040d565b005b61017b61057f565b6040516101889190612c11565b60405180910390f35b6101ab60048036038101906101a69190612c5d565b610585565b6040516101b9929190612e62565b60405180910390f35b6101ca610607565b6040516101d79190612c11565b60405180910390f35b6101fa60048036038101906101f59190612eb8565b61060d565b604051610208929190612ef8565b60405180910390f35b610219610753565b6040516102269190612c11565b60405180910390f35b61024960048036038101906102449190612f21565b610759565b005b610253610947565b6040516102609190612f83565b60405180910390f35b610283600480360381019061027e9190612c5d565b61096d565b005b61028d611213565b60405161029a9190612f9e565b60405180910390f35b6102bd60048036038101906102b89190612fe5565b611226565b005b6102c76112ea565b6040516102d49190612c11565b60405180910390f35b6102f760048036038101906102f29190613060565b6112f0565b6040516103049190613124565b60405180910390f35b61032760048036038101906103229190612c5d565b611392565b005b610343600480360381019061033e9190612c5d565b61159b565b005b61034d611a89565b60405161035a9190612f83565b60405180910390f35b60035481565b60606008600083815260200190815260200160002060040180548060200260200160405190810160405280929190818152602001828054801561040157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103b7575b50505050509050919050565b60011515600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33306005546040518463ffffffff1660e01b815260040161047293929190613140565b602060405180830381600087803b15801561048c57600080fd5b505af11580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c4919061318c565b1515146104fd576040517f2ff987e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808154600101919050819055506000805490504260086000838152602001908152602001600020600101819055506105373382611aaf565b42813373ffffffffffffffffffffffffffffffffffffffff167f95b18bbe5373dcbe675d3ab2ae6e3888392575c51b8b8c9c3cbbdb431af1929960405160405180910390a450565b60075481565b600061058f612a8b565b600060086000858152602001908152602001600020600201541160086000858152602001908152602001600020600501806018806020026040519081016040528092919082601880156105f7576020028201915b8154815260200190600101908083116105e3575b5050505050905091509150915091565b60025481565b6000806000600860008681526020019081526020016000206003018054806020026020016040519081016040528092919081815260200182805480156106a857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161065e575b5050505050905060008082511115610742575b8473ffffffffffffffffffffffffffffffffffffffff168282815181106106e5576106e46131b9565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156107265760006107158787611db5565b90506001819450945050505061074c565b806001019050815181106106bb5760008093509350505061074c565b6000809350935050505b9250929050565b60005481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107e0576040517f9639a84e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b330846040518363ffffffff1660e01b815260040161081b9291906131e8565b602060405180830381600087803b15801561083557600080fd5b505af1158015610849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086d919061318c565b5060008373ffffffffffffffffffffffffffffffffffffffff166323b872dd3084866040518463ffffffff1660e01b81526004016108ad93929190613140565b602060405180830381600087803b1580156108c757600080fd5b505af11580156108db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ff919061318c565b905080610941576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109389061326e565b60405180910390fd5b50505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600354600254600860008481526020019081526020016000206001015461099591906132bd565b61099f91906132bd565b4210156109d8576040517faf30eb6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6008600082815260200190815260200160002060000160009054906101000a900460ff1615610a33576040517ffc1cee5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016008600083815260200190815260200160002060000160006101000a81548160ff021916908315150217905550600115156008600084815260200190815260200160002060000160019054906101000a900460ff1615151415610ac4576040517f9162ee7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060086000848152602001908152602001600020600401805480602002602001604051908101604052809291908181526020018280548015610b5c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610b12575b50505050509050610b6b612a8b565b60018251111561115d57600060189050610b8485611f07565b915060008060005b600091505b600090506000610bbb878581518110610bad57610bac6131b9565b5b60200260200101518a6112f0565b90505b808260198110610bd157610bd06131b9565b5b6020020151868460188110610be957610be86131b9565b5b60200201511415610c7c576001600860008b8152602001908152602001600020601d016000898781518110610c2157610c206131b9565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a016000848152602001908152602001600020819055505b600b821415610c8c578160010191505b8160010191506004821115610f2b57610cbf89888681518110610cb257610cb16131b9565b5b6020026020010151612020565b15610f2a57600185610cd19190613313565b831415610d6e57600860008a8152602001908152602001600020600301878581518110610d0157610d006131b9565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e74565b600067ffffffffffffffff811115610d8957610d88613347565b5b604051908082528060200260200182016040528015610db75781602001602082028036833780820191505090505b50600860008b81526020019081526020016000206003019080519060200190610de1929190612aae565b50600860008a8152602001908152602001600020600301878581518110610e0b57610e0a6131b9565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b60018301945082600860008b815260200190815260200160002060020181905550610f256040518060400160405280601481526020017f46697273742042696e676f20696e20726f756e64000000000000000000000000815250846040518060400160405280601281526020017f666f7220706c61796572206164647265737300000000000000000000000000008152508a8881518110610f1857610f176131b9565b5b602002602001015161292a565b610f34565b5b60198210610bbe575b82600101925050838210610b915782600101925085518310610b8c57600092505b600080610f7c8a898781518110610f6f57610f6e6131b9565b5b602002602001015161060d565b91509150811561114857600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb898781518110610fd757610fd66131b9565b5b6020026020010151836040518363ffffffff1660e01b8152600401610ffd9291906131e8565b602060405180830381600087803b15801561101757600080fd5b505af115801561102b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104f919061318c565b506002600860008c8152602001908152602001600020601d0160008a888151811061107d5761107c6131b9565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908360028111156110e4576110e3613376565b5b0217905550808886815181106110fd576110fc6131b9565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a60405160405180910390a35b846001019450505085518310610f5557505050505b60016008600086815260200190815260200160002060000160016101000a81548160ff0219169083151502179055508151847f46aef705aa56eecf91cff09c38b492bb00be62e9cc0dbb3f786810e7b875136b8360086000898152602001908152602001600020600201546040516111d69291906133a5565b60405180910390a3505060006008600083815260200190815260200160002060000160006101000a81548160ff0219169083151502179055505050565b600660009054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112ad576040517f9639a84e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84600281905550836003819055508260058190555081600660006101000a81548160ff021916908315150217905550806007819055505050505050565b60055481565b6112f8612b38565b60086000838152602001908152602001600020601d0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101601980602002604051908101604052809291908260198015611385576020028201915b815481526020019060010190808311611371575b5050505050905092915050565b600754600160086000848152602001908152602001600020600401805490506113bb91906132bd565b11156113f3576040517f9aa0271f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061140083336129cc565b915091506000600281111561141857611417613376565b5b82600281111561142b5761142a613376565b5b14611462576040517f70b48ea500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8042111561149c576040517f496f3b7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60011515600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33306005546040518463ffffffff1660e01b815260040161150193929190613140565b602060405180830381600087803b15801561151b57600080fd5b505af115801561152f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611553919061318c565b15151461158c576040517f2ff987e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6115963384611aaf565b505050565b8060035460025460086000848152602001908152602001600020600101546115c391906132bd565b6115cd91906132bd565b421015611606576040517faf30eb6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6008600082815260200190815260200160002060000160009054906101000a900460ff1615611661576040517ffc1cee5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016008600083815260200190815260200160002060000160006101000a81548160ff021916908315150217905550600160028111156116a4576116a3613376565b5b60086000848152602001908152602001600020601d0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16600281111561171a57611719613376565b5b14611751576040517f6c8aeb7700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600554905060008015156008600086815260200190815260200160002060000160019054906101000a900460ff16151514156117bb576040517fff07fcae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600860008681526020019081526020016000206002015411156118a5576117e48433611db5565b905060008111156118a057600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161184c9291906131e8565b602060405180830381600087803b15801561186657600080fd5b505af115801561187a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189e919061318c565b505b611991565b600160086000868152602001908152602001600020600401805490501115806118da5750600660009054906101000a900460ff165b1561199057600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b815260040161193c9291906131e8565b602060405180830381600087803b15801561195657600080fd5b505af115801561196a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198e919061318c565b505b5b600260086000868152602001908152602001600020601d0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690836002811115611a0b57611a0a613376565b5b0217905550803373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a60405160405180910390a3505060006008600083815260200190815260200160002060000160006101000a81548160ff0219169083151502179055505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160086000838152602001908152602001600020601d0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690836002811115611b2957611b28613376565b5b021790555060086000828152602001908152602001600020600401829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000611baf612b38565b6000600143611bbe9190613313565b40905060008160001c905060008133604051602001611bde929190613439565b6040516020818303038152906040528051906020012060001c90505b6000600682901c11611c45576040823387604051602001611c1d93929190613465565b6040516020818303038152906040528051906020012060001c611c4091906134d1565b611c57565b6040600682901c611c5691906134d1565b5b905080848660198110611c6d57611c6c6131b9565b5b602002018181525050600b851415611c86578460010194505b84600101945060198510611bfa578360086000888152602001908152602001600020601d0160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101906019611cf9929190612b5b565b50600160086000888152602001908152602001600020601d0160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a016000600c815260200190815260200160002081905550853373ffffffffffffffffffffffffffffffffffffffff167f49f8fa5eee2e3f21251c2e968640dcaef35cb9332429eb059bb3cd56ddc2533d60405160405180910390a350505050505050565b60008060086000858152602001908152602001600020600301805480602002602001604051908101604052809291908181526020018280548015611e4e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611e04575b505050505090506000805b8473ffffffffffffffffffffffffffffffffffffffff16838381518110611e8357611e826131b9565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415611eb05780806001019150505b81600101915082518210611e595782516008600088815260200190815260200160002060040180549050600554611ee79190613502565b82611ef29190613502565b611efc919061355c565b935050505092915050565b611f0f612a8b565b611f17612a8b565b600080600143611f279190613313565b40905060008160001c905060008133604051602001611f47929190613439565b6040516020818303038152906040528051906020012060001c90505b6000600682901c11611fae576040823386604051602001611f8693929190613465565b6040516020818303038152906040528051906020012060001c611fa991906134d1565b611fc0565b6040600682901c611fbf91906134d1565b5b905080858560188110611fd657611fd56131b9565b5b60200201818152505083600101935060188410611f63578460086000898152602001908152602001600020600501906018612012929190612b9b565b508495505050505050919050565b600080600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a016000808152602001908152602001600020541480156121025750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006006815260200190815260200160002054145b80156121765750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006012815260200190815260200160002054145b80156121ea5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006018815260200190815260200160002054145b156121f9576001915050612924565b600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600060048152602001908152602001600020541480156122d95750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006008815260200190815260200160002054145b801561234d5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006010815260200190815260200160002054145b80156123c15750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006014815260200190815260200160002054145b156123d0576001915050612924565b5b600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a016000806005856124399190613502565b61244391906132bd565b8152602001908152602001600020541480156124de5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600060016005856124c39190613502565b6124cd91906132bd565b815260200190815260200160002054145b80156125695750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a016000600260058561254e9190613502565b61255891906132bd565b815260200190815260200160002054145b80156125f45750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600060036005856125d99190613502565b6125e391906132bd565b815260200190815260200160002054145b801561267f5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600060046005856126649190613502565b61266e91906132bd565b815260200190815260200160002054145b1561268e576001915050612924565b600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160008360006126f591906132bd565b8152602001908152602001600020541480156127845750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600083600561277391906132bd565b815260200190815260200160002054145b80156128035750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600083600a6127f291906132bd565b815260200190815260200160002054145b80156128825750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600083600f61287191906132bd565b815260200190815260200160002054145b80156129015750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160008360146128f091906132bd565b815260200190815260200160002054145b15612910576001915050612924565b806001019050600581106123d15760009150505b92915050565b6129c6848484846040516024016129449493929190613615565b6040516020818303038152906040527f7c4632a4000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612a62565b50505050565b60008060086000858152602001908152602001600020601d0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166002546008600087815260200190815260200160002060010154612a5791906132bd565b915091509250929050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b604051806103000160405280601890602082028036833780820191505090505090565b828054828255906000526020600020908101928215612b27579160200282015b82811115612b265782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612ace565b5b509050612b349190612bdb565b5090565b604051806103200160405280601990602082028036833780820191505090505090565b8260198101928215612b8a579160200282015b82811115612b89578251825591602001919060010190612b6e565b5b509050612b979190612bdb565b5090565b8260188101928215612bca579160200282015b82811115612bc9578251825591602001919060010190612bae565b5b509050612bd79190612bdb565b5090565b5b80821115612bf4576000816000905550600101612bdc565b5090565b6000819050919050565b612c0b81612bf8565b82525050565b6000602082019050612c266000830184612c02565b92915050565b600080fd5b612c3a81612bf8565b8114612c4557600080fd5b50565b600081359050612c5781612c31565b92915050565b600060208284031215612c7357612c72612c2c565b5b6000612c8184828501612c48565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612ce182612cb6565b9050919050565b612cf181612cd6565b82525050565b6000612d038383612ce8565b60208301905092915050565b6000602082019050919050565b6000612d2782612c8a565b612d318185612c95565b9350612d3c83612ca6565b8060005b83811015612d6d578151612d548882612cf7565b9750612d5f83612d0f565b925050600181019050612d40565b5085935050505092915050565b60006020820190508181036000830152612d948184612d1c565b905092915050565b60008115159050919050565b612db181612d9c565b82525050565b600060189050919050565b600081905092915050565b6000819050919050565b612de081612bf8565b82525050565b6000612df28383612dd7565b60208301905092915050565b6000602082019050919050565b612e1481612db7565b612e1e8184612dc2565b9250612e2982612dcd565b8060005b83811015612e5a578151612e418782612de6565b9650612e4c83612dfe565b925050600181019050612e2d565b505050505050565b600061032082019050612e786000830185612da8565b612e856020830184612e0b565b9392505050565b612e9581612cd6565b8114612ea057600080fd5b50565b600081359050612eb281612e8c565b92915050565b60008060408385031215612ecf57612ece612c2c565b5b6000612edd85828601612c48565b9250506020612eee85828601612ea3565b9150509250929050565b6000604082019050612f0d6000830185612da8565b612f1a6020830184612c02565b9392505050565b600080600060608486031215612f3a57612f39612c2c565b5b6000612f4886828701612ea3565b9350506020612f5986828701612c48565b9250506040612f6a86828701612ea3565b9150509250925092565b612f7d81612cd6565b82525050565b6000602082019050612f986000830184612f74565b92915050565b6000602082019050612fb36000830184612da8565b92915050565b612fc281612d9c565b8114612fcd57600080fd5b50565b600081359050612fdf81612fb9565b92915050565b600080600080600060a0868803121561300157613000612c2c565b5b600061300f88828901612c48565b955050602061302088828901612c48565b945050604061303188828901612c48565b935050606061304288828901612fd0565b925050608061305388828901612c48565b9150509295509295909350565b6000806040838503121561307757613076612c2c565b5b600061308585828601612ea3565b925050602061309685828601612c48565b9150509250929050565b600060199050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b6130d6816130a0565b6130e081846130ab565b92506130eb826130b6565b8060005b8381101561311c5781516131038782612de6565b965061310e836130c0565b9250506001810190506130ef565b505050505050565b60006103208201905061313a60008301846130cd565b92915050565b60006060820190506131556000830186612f74565b6131626020830185612f74565b61316f6040830184612c02565b949350505050565b60008151905061318681612fb9565b92915050565b6000602082840312156131a2576131a1612c2c565b5b60006131b084828501613177565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506131fd6000830185612f74565b61320a6020830184612c02565b9392505050565b600082825260208201905092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000613258600f83613211565b915061326382613222565b602082019050919050565b600060208201905081810360008301526132878161324b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006132c882612bf8565b91506132d383612bf8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156133085761330761328e565b5b828201905092915050565b600061331e82612bf8565b915061332983612bf8565b92508282101561333c5761333b61328e565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000610320820190506133bb6000830185612e0b565b6133c9610300830184612c02565b9392505050565b6000819050919050565b6133eb6133e682612bf8565b6133d0565b82525050565b60008160601b9050919050565b6000613409826133f1565b9050919050565b600061341b826133fe565b9050919050565b61343361342e82612cd6565b613410565b82525050565b600061344582856133da565b6020820191506134558284613422565b6014820191508190509392505050565b600061347182866133da565b6020820191506134818285613422565b60148201915061349182846133da565b602082019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006134dc82612bf8565b91506134e783612bf8565b9250826134f7576134f66134a2565b5b828206905092915050565b600061350d82612bf8565b915061351883612bf8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156135515761355061328e565b5b828202905092915050565b600061356782612bf8565b915061357283612bf8565b925082613582576135816134a2565b5b828204905092915050565b600081519050919050565b60005b838110156135b657808201518184015260208101905061359b565b838111156135c5576000848401525b50505050565b6000601f19601f8301169050919050565b60006135e78261358d565b6135f18185613211565b9350613601818560208601613598565b61360a816135cb565b840191505092915050565b6000608082019050818103600083015261362f81876135dc565b905061363e6020830186612c02565b818103604083015261365081856135dc565b905061365f6060830184612f74565b9594505050505056fea26469706673582212204fc4e0a7fd7bb4fe271e3eb9abd82519a0db4fe75e3945e3f0081db69bf26de664736f6c63430008080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80634fbd239b116100a2578063884c0fe911610071578063884c0fe9146102bf57806395f5d1fd146102dd578063bdff7d881461030d578063d709815414610329578063f851a4401461034557610116565b80634fbd239b1461024b57806360b2a56a1461026957806362e838ef14610285578063744c552f146102a357610116565b806313b3da5d116100e957806313b3da5d14610191578063172bf854146101c2578063227b0354146101e057806327249ee8146102115780633ccdbb281461022f57610116565b8063050669171461011b57806307d8c565146101395780630b3ca74d146101695780631080274914610173575b600080fd5b610123610363565b6040516101309190612c11565b60405180910390f35b610153600480360381019061014e9190612c5d565b610369565b6040516101609190612d7a565b60405180910390f35b61017161040d565b005b61017b61057f565b6040516101889190612c11565b60405180910390f35b6101ab60048036038101906101a69190612c5d565b610585565b6040516101b9929190612e62565b60405180910390f35b6101ca610607565b6040516101d79190612c11565b60405180910390f35b6101fa60048036038101906101f59190612eb8565b61060d565b604051610208929190612ef8565b60405180910390f35b610219610753565b6040516102269190612c11565b60405180910390f35b61024960048036038101906102449190612f21565b610759565b005b610253610947565b6040516102609190612f83565b60405180910390f35b610283600480360381019061027e9190612c5d565b61096d565b005b61028d611213565b60405161029a9190612f9e565b60405180910390f35b6102bd60048036038101906102b89190612fe5565b611226565b005b6102c76112ea565b6040516102d49190612c11565b60405180910390f35b6102f760048036038101906102f29190613060565b6112f0565b6040516103049190613124565b60405180910390f35b61032760048036038101906103229190612c5d565b611392565b005b610343600480360381019061033e9190612c5d565b61159b565b005b61034d611a89565b60405161035a9190612f83565b60405180910390f35b60035481565b60606008600083815260200190815260200160002060040180548060200260200160405190810160405280929190818152602001828054801561040157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103b7575b50505050509050919050565b60011515600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33306005546040518463ffffffff1660e01b815260040161047293929190613140565b602060405180830381600087803b15801561048c57600080fd5b505af11580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c4919061318c565b1515146104fd576040517f2ff987e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808154600101919050819055506000805490504260086000838152602001908152602001600020600101819055506105373382611aaf565b42813373ffffffffffffffffffffffffffffffffffffffff167f95b18bbe5373dcbe675d3ab2ae6e3888392575c51b8b8c9c3cbbdb431af1929960405160405180910390a450565b60075481565b600061058f612a8b565b600060086000858152602001908152602001600020600201541160086000858152602001908152602001600020600501806018806020026040519081016040528092919082601880156105f7576020028201915b8154815260200190600101908083116105e3575b5050505050905091509150915091565b60025481565b6000806000600860008681526020019081526020016000206003018054806020026020016040519081016040528092919081815260200182805480156106a857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161065e575b5050505050905060008082511115610742575b8473ffffffffffffffffffffffffffffffffffffffff168282815181106106e5576106e46131b9565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156107265760006107158787611db5565b90506001819450945050505061074c565b806001019050815181106106bb5760008093509350505061074c565b6000809350935050505b9250929050565b60005481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107e0576040517f9639a84e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b330846040518363ffffffff1660e01b815260040161081b9291906131e8565b602060405180830381600087803b15801561083557600080fd5b505af1158015610849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086d919061318c565b5060008373ffffffffffffffffffffffffffffffffffffffff166323b872dd3084866040518463ffffffff1660e01b81526004016108ad93929190613140565b602060405180830381600087803b1580156108c757600080fd5b505af11580156108db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ff919061318c565b905080610941576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109389061326e565b60405180910390fd5b50505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600354600254600860008481526020019081526020016000206001015461099591906132bd565b61099f91906132bd565b4210156109d8576040517faf30eb6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6008600082815260200190815260200160002060000160009054906101000a900460ff1615610a33576040517ffc1cee5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016008600083815260200190815260200160002060000160006101000a81548160ff021916908315150217905550600115156008600084815260200190815260200160002060000160019054906101000a900460ff1615151415610ac4576040517f9162ee7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060086000848152602001908152602001600020600401805480602002602001604051908101604052809291908181526020018280548015610b5c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610b12575b50505050509050610b6b612a8b565b60018251111561115d57600060189050610b8485611f07565b915060008060005b600091505b600090506000610bbb878581518110610bad57610bac6131b9565b5b60200260200101518a6112f0565b90505b808260198110610bd157610bd06131b9565b5b6020020151868460188110610be957610be86131b9565b5b60200201511415610c7c576001600860008b8152602001908152602001600020601d016000898781518110610c2157610c206131b9565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a016000848152602001908152602001600020819055505b600b821415610c8c578160010191505b8160010191506004821115610f2b57610cbf89888681518110610cb257610cb16131b9565b5b6020026020010151612020565b15610f2a57600185610cd19190613313565b831415610d6e57600860008a8152602001908152602001600020600301878581518110610d0157610d006131b9565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e74565b600067ffffffffffffffff811115610d8957610d88613347565b5b604051908082528060200260200182016040528015610db75781602001602082028036833780820191505090505b50600860008b81526020019081526020016000206003019080519060200190610de1929190612aae565b50600860008a8152602001908152602001600020600301878581518110610e0b57610e0a6131b9565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b60018301945082600860008b815260200190815260200160002060020181905550610f256040518060400160405280601481526020017f46697273742042696e676f20696e20726f756e64000000000000000000000000815250846040518060400160405280601281526020017f666f7220706c61796572206164647265737300000000000000000000000000008152508a8881518110610f1857610f176131b9565b5b602002602001015161292a565b610f34565b5b60198210610bbe575b82600101925050838210610b915782600101925085518310610b8c57600092505b600080610f7c8a898781518110610f6f57610f6e6131b9565b5b602002602001015161060d565b91509150811561114857600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb898781518110610fd757610fd66131b9565b5b6020026020010151836040518363ffffffff1660e01b8152600401610ffd9291906131e8565b602060405180830381600087803b15801561101757600080fd5b505af115801561102b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104f919061318c565b506002600860008c8152602001908152602001600020601d0160008a888151811061107d5761107c6131b9565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908360028111156110e4576110e3613376565b5b0217905550808886815181106110fd576110fc6131b9565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a60405160405180910390a35b846001019450505085518310610f5557505050505b60016008600086815260200190815260200160002060000160016101000a81548160ff0219169083151502179055508151847f46aef705aa56eecf91cff09c38b492bb00be62e9cc0dbb3f786810e7b875136b8360086000898152602001908152602001600020600201546040516111d69291906133a5565b60405180910390a3505060006008600083815260200190815260200160002060000160006101000a81548160ff0219169083151502179055505050565b600660009054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112ad576040517f9639a84e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84600281905550836003819055508260058190555081600660006101000a81548160ff021916908315150217905550806007819055505050505050565b60055481565b6112f8612b38565b60086000838152602001908152602001600020601d0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101601980602002604051908101604052809291908260198015611385576020028201915b815481526020019060010190808311611371575b5050505050905092915050565b600754600160086000848152602001908152602001600020600401805490506113bb91906132bd565b11156113f3576040517f9aa0271f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061140083336129cc565b915091506000600281111561141857611417613376565b5b82600281111561142b5761142a613376565b5b14611462576040517f70b48ea500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8042111561149c576040517f496f3b7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60011515600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33306005546040518463ffffffff1660e01b815260040161150193929190613140565b602060405180830381600087803b15801561151b57600080fd5b505af115801561152f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611553919061318c565b15151461158c576040517f2ff987e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6115963384611aaf565b505050565b8060035460025460086000848152602001908152602001600020600101546115c391906132bd565b6115cd91906132bd565b421015611606576040517faf30eb6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6008600082815260200190815260200160002060000160009054906101000a900460ff1615611661576040517ffc1cee5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016008600083815260200190815260200160002060000160006101000a81548160ff021916908315150217905550600160028111156116a4576116a3613376565b5b60086000848152602001908152602001600020601d0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16600281111561171a57611719613376565b5b14611751576040517f6c8aeb7700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600554905060008015156008600086815260200190815260200160002060000160019054906101000a900460ff16151514156117bb576040517fff07fcae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600860008681526020019081526020016000206002015411156118a5576117e48433611db5565b905060008111156118a057600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161184c9291906131e8565b602060405180830381600087803b15801561186657600080fd5b505af115801561187a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189e919061318c565b505b611991565b600160086000868152602001908152602001600020600401805490501115806118da5750600660009054906101000a900460ff165b1561199057600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b815260040161193c9291906131e8565b602060405180830381600087803b15801561195657600080fd5b505af115801561196a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198e919061318c565b505b5b600260086000868152602001908152602001600020601d0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690836002811115611a0b57611a0a613376565b5b0217905550803373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a60405160405180910390a3505060006008600083815260200190815260200160002060000160006101000a81548160ff0219169083151502179055505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160086000838152602001908152602001600020601d0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690836002811115611b2957611b28613376565b5b021790555060086000828152602001908152602001600020600401829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000611baf612b38565b6000600143611bbe9190613313565b40905060008160001c905060008133604051602001611bde929190613439565b6040516020818303038152906040528051906020012060001c90505b6000600682901c11611c45576040823387604051602001611c1d93929190613465565b6040516020818303038152906040528051906020012060001c611c4091906134d1565b611c57565b6040600682901c611c5691906134d1565b5b905080848660198110611c6d57611c6c6131b9565b5b602002018181525050600b851415611c86578460010194505b84600101945060198510611bfa578360086000888152602001908152602001600020601d0160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101906019611cf9929190612b5b565b50600160086000888152602001908152602001600020601d0160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a016000600c815260200190815260200160002081905550853373ffffffffffffffffffffffffffffffffffffffff167f49f8fa5eee2e3f21251c2e968640dcaef35cb9332429eb059bb3cd56ddc2533d60405160405180910390a350505050505050565b60008060086000858152602001908152602001600020600301805480602002602001604051908101604052809291908181526020018280548015611e4e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611e04575b505050505090506000805b8473ffffffffffffffffffffffffffffffffffffffff16838381518110611e8357611e826131b9565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415611eb05780806001019150505b81600101915082518210611e595782516008600088815260200190815260200160002060040180549050600554611ee79190613502565b82611ef29190613502565b611efc919061355c565b935050505092915050565b611f0f612a8b565b611f17612a8b565b600080600143611f279190613313565b40905060008160001c905060008133604051602001611f47929190613439565b6040516020818303038152906040528051906020012060001c90505b6000600682901c11611fae576040823386604051602001611f8693929190613465565b6040516020818303038152906040528051906020012060001c611fa991906134d1565b611fc0565b6040600682901c611fbf91906134d1565b5b905080858560188110611fd657611fd56131b9565b5b60200201818152505083600101935060188410611f63578460086000898152602001908152602001600020600501906018612012929190612b9b565b508495505050505050919050565b600080600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a016000808152602001908152602001600020541480156121025750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006006815260200190815260200160002054145b80156121765750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006012815260200190815260200160002054145b80156121ea5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006018815260200190815260200160002054145b156121f9576001915050612924565b600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600060048152602001908152602001600020541480156122d95750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006008815260200190815260200160002054145b801561234d5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006010815260200190815260200160002054145b80156123c15750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006014815260200190815260200160002054145b156123d0576001915050612924565b5b600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a016000806005856124399190613502565b61244391906132bd565b8152602001908152602001600020541480156124de5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600060016005856124c39190613502565b6124cd91906132bd565b815260200190815260200160002054145b80156125695750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a016000600260058561254e9190613502565b61255891906132bd565b815260200190815260200160002054145b80156125f45750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600060036005856125d99190613502565b6125e391906132bd565b815260200190815260200160002054145b801561267f5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600060046005856126649190613502565b61266e91906132bd565b815260200190815260200160002054145b1561268e576001915050612924565b600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160008360006126f591906132bd565b8152602001908152602001600020541480156127845750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600083600561277391906132bd565b815260200190815260200160002054145b80156128035750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600083600a6127f291906132bd565b815260200190815260200160002054145b80156128825750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600083600f61287191906132bd565b815260200190815260200160002054145b80156129015750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160008360146128f091906132bd565b815260200190815260200160002054145b15612910576001915050612924565b806001019050600581106123d15760009150505b92915050565b6129c6848484846040516024016129449493929190613615565b6040516020818303038152906040527f7c4632a4000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612a62565b50505050565b60008060086000858152602001908152602001600020601d0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166002546008600087815260200190815260200160002060010154612a5791906132bd565b915091509250929050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b604051806103000160405280601890602082028036833780820191505090505090565b828054828255906000526020600020908101928215612b27579160200282015b82811115612b265782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612ace565b5b509050612b349190612bdb565b5090565b604051806103200160405280601990602082028036833780820191505090505090565b8260198101928215612b8a579160200282015b82811115612b89578251825591602001919060010190612b6e565b5b509050612b979190612bdb565b5090565b8260188101928215612bca579160200282015b82811115612bc9578251825591602001919060010190612bae565b5b509050612bd79190612bdb565b5090565b5b80821115612bf4576000816000905550600101612bdc565b5090565b6000819050919050565b612c0b81612bf8565b82525050565b6000602082019050612c266000830184612c02565b92915050565b600080fd5b612c3a81612bf8565b8114612c4557600080fd5b50565b600081359050612c5781612c31565b92915050565b600060208284031215612c7357612c72612c2c565b5b6000612c8184828501612c48565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612ce182612cb6565b9050919050565b612cf181612cd6565b82525050565b6000612d038383612ce8565b60208301905092915050565b6000602082019050919050565b6000612d2782612c8a565b612d318185612c95565b9350612d3c83612ca6565b8060005b83811015612d6d578151612d548882612cf7565b9750612d5f83612d0f565b925050600181019050612d40565b5085935050505092915050565b60006020820190508181036000830152612d948184612d1c565b905092915050565b60008115159050919050565b612db181612d9c565b82525050565b600060189050919050565b600081905092915050565b6000819050919050565b612de081612bf8565b82525050565b6000612df28383612dd7565b60208301905092915050565b6000602082019050919050565b612e1481612db7565b612e1e8184612dc2565b9250612e2982612dcd565b8060005b83811015612e5a578151612e418782612de6565b9650612e4c83612dfe565b925050600181019050612e2d565b505050505050565b600061032082019050612e786000830185612da8565b612e856020830184612e0b565b9392505050565b612e9581612cd6565b8114612ea057600080fd5b50565b600081359050612eb281612e8c565b92915050565b60008060408385031215612ecf57612ece612c2c565b5b6000612edd85828601612c48565b9250506020612eee85828601612ea3565b9150509250929050565b6000604082019050612f0d6000830185612da8565b612f1a6020830184612c02565b9392505050565b600080600060608486031215612f3a57612f39612c2c565b5b6000612f4886828701612ea3565b9350506020612f5986828701612c48565b9250506040612f6a86828701612ea3565b9150509250925092565b612f7d81612cd6565b82525050565b6000602082019050612f986000830184612f74565b92915050565b6000602082019050612fb36000830184612da8565b92915050565b612fc281612d9c565b8114612fcd57600080fd5b50565b600081359050612fdf81612fb9565b92915050565b600080600080600060a0868803121561300157613000612c2c565b5b600061300f88828901612c48565b955050602061302088828901612c48565b945050604061303188828901612c48565b935050606061304288828901612fd0565b925050608061305388828901612c48565b9150509295509295909350565b6000806040838503121561307757613076612c2c565b5b600061308585828601612ea3565b925050602061309685828601612c48565b9150509250929050565b600060199050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b6130d6816130a0565b6130e081846130ab565b92506130eb826130b6565b8060005b8381101561311c5781516131038782612de6565b965061310e836130c0565b9250506001810190506130ef565b505050505050565b60006103208201905061313a60008301846130cd565b92915050565b60006060820190506131556000830186612f74565b6131626020830185612f74565b61316f6040830184612c02565b949350505050565b60008151905061318681612fb9565b92915050565b6000602082840312156131a2576131a1612c2c565b5b60006131b084828501613177565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506131fd6000830185612f74565b61320a6020830184612c02565b9392505050565b600082825260208201905092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000613258600f83613211565b915061326382613222565b602082019050919050565b600060208201905081810360008301526132878161324b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006132c882612bf8565b91506132d383612bf8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156133085761330761328e565b5b828201905092915050565b600061331e82612bf8565b915061332983612bf8565b92508282101561333c5761333b61328e565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000610320820190506133bb6000830185612e0b565b6133c9610300830184612c02565b9392505050565b6000819050919050565b6133eb6133e682612bf8565b6133d0565b82525050565b60008160601b9050919050565b6000613409826133f1565b9050919050565b600061341b826133fe565b9050919050565b61343361342e82612cd6565b613410565b82525050565b600061344582856133da565b6020820191506134558284613422565b6014820191508190509392505050565b600061347182866133da565b6020820191506134818285613422565b60148201915061349182846133da565b602082019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006134dc82612bf8565b91506134e783612bf8565b9250826134f7576134f66134a2565b5b828206905092915050565b600061350d82612bf8565b915061351883612bf8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156135515761355061328e565b5b828202905092915050565b600061356782612bf8565b915061357283612bf8565b925082613582576135816134a2565b5b828204905092915050565b600081519050919050565b60005b838110156135b657808201518184015260208101905061359b565b838111156135c5576000848401525b50505050565b6000601f19601f8301169050919050565b60006135e78261358d565b6135f18185613211565b9350613601818560208601613598565b61360a816135cb565b840191505092915050565b6000608082019050818103600083015261362f81876135dc565b905061363e6020830186612c02565b818103604083015261365081856135dc565b905061365f6060830184612f74565b9594505050505056fea26469706673582212204fc4e0a7fd7bb4fe271e3eb9abd82519a0db4fe75e3945e3f0081db69bf26de664736f6c63430008080033",
  "devdoc": {
    "events": {
      "Drawed(uint256,uint256,uint256[24],uint256)": {
        "details": "bingoRound == 0: no Bingo; bingoRound > 0: bingo in number of rounds"
      }
    },
    "kind": "dev",
    "methods": {
      "checkWinner(uint256,address)": {
        "params": {
          "_gameRound": "the round of game id",
          "_player": "player address of this round of game"
        }
      },
      "claimPrize(uint256)": {
        "details": "Normally player dont need to call this function, in case of draw function errorIf return bet is true, player needs to call this function to get the token back",
        "params": {
          "_gameRound": "the round of game id that player joined"
        }
      },
      "drawWinner(uint256)": {
        "details": "if one game is drawed, other players in this round",
        "params": {
          "_gameRound": "the round of game id that player joined"
        }
      },
      "getPlayerArray(uint256)": {
        "details": "This function is for frontend to get the players addresses in each round",
        "params": {
          "_gameRound": "the round of game id"
        }
      },
      "getPlayerGameBoard(address,uint256)": {
        "params": {
          "_gameRound": "the round of game id",
          "_player": "player address of this round of game"
        }
      },
      "getRoundBingoResult(uint256)": {
        "params": {
          "_gameRound": "the round of game id"
        }
      },
      "joinCurrentGameWithBet(uint256)": {
        "details": "Worst case of nobody has a bingo for 4 players are about 24356551 gas within 0 - 64 as numbers that this contract generated for bingo game with 24 winning numbers generated",
        "params": {
          "_gameRoundToJoin": "the round of game id"
        }
      },
      "withdrawToken(address,uint256,address)": {
        "details": "this function helps people who accidentally transfer ERC20 token to our contract, and also withdraw Bingo Token as revenue"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Claimed(address,uint256)": {
        "notice": "Event emit when a player claimed prize"
      },
      "Created(address,uint256,uint256)": {
        "notice": "Event emit when player create a new game"
      },
      "Drawed(uint256,uint256,uint256[24],uint256)": {
        "notice": "Event emit when a game is drawed"
      },
      "Joined(address,uint256)": {
        "notice": "Event emit when player joins a existing game"
      }
    },
    "kind": "user",
    "methods": {
      "BingoToken()": {
        "notice": "Each player pays an ERC20 entry fee, transferred on join"
      },
      "admin()": {
        "notice": "Admin can update the entry fee, join duration, and turn duration"
      },
      "betAmountForBINGO()": {
        "notice": "`betAmountForBINGO` sets to 1 token as default to save gas"
      },
      "checkWinner(uint256,address)": {
        "notice": "Check if player is the the winner of this game round, and returns bool with winning prize to claim"
      },
      "claimPrize(uint256)": {
        "notice": "Players claim prize if retrun bet is true or there is only one player in this game round"
      },
      "constructor": {
        "notice": "Deploying Bingo Token first before deploying this contract"
      },
      "drawWinner(uint256)": {
        "notice": "Players draw winner of this game round or claim prize"
      },
      "getPlayerArray(uint256)": {
        "notice": "Get players addresses array of this round"
      },
      "getPlayerGameBoard(address,uint256)": {
        "notice": "Get player game board numbers in a uint256 array"
      },
      "getRoundBingoResult(uint256)": {
        "notice": "Get the Bingo result of this round of game and winning numbers"
      },
      "joinCurrentGameWithBet(uint256)": {
        "notice": "Players join current game and generate their game board"
      },
      "joinDuration()": {
        "notice": "Games have a minimum join duration before start`joinDuration` sets to 180 seconds as default to save gas"
      },
      "maxPlayerNum()": {
        "notice": "maxPlayerNum sets the max player numbers in a game, default as 4 due to out of gas problem"
      },
      "returnBet()": {
        "notice": "returnBet sets the contract whether return player entry fee or not"
      },
      "setConfig(uint256,uint256,uint256,bool,uint256)": {
        "notice": "set config for the game, such as join durations, turn durations, bet amount for bingo game, returnBet boolean for if game returns no-winner game, max player numbers in one game"
      },
      "startNewGameWithBet()": {
        "notice": "player start a new with game board generated"
      },
      "turnDuration()": {
        "notice": "Games have a minimum turn duration between draws`turnDuration` sets to 180 seconds as default to save gas"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 69,
        "contract": "contracts/BingoGame.sol:Bingo",
        "label": "gameRoundNow",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 72,
        "contract": "contracts/BingoGame.sol:Bingo",
        "label": "admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 76,
        "contract": "contracts/BingoGame.sol:Bingo",
        "label": "joinDuration",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 80,
        "contract": "contracts/BingoGame.sol:Bingo",
        "label": "turnDuration",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 83,
        "contract": "contracts/BingoGame.sol:Bingo",
        "label": "BingoToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 87,
        "contract": "contracts/BingoGame.sol:Bingo",
        "label": "betAmountForBINGO",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 90,
        "contract": "contracts/BingoGame.sol:Bingo",
        "label": "returnBet",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 94,
        "contract": "contracts/BingoGame.sol:Bingo",
        "label": "maxPlayerNum",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 100,
        "contract": "contracts/BingoGame.sol:Bingo",
        "label": "gameRounds",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(gameRound)67_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)24_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[24]",
        "numberOfBytes": "768"
      },
      "t_array(t_uint256)25_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[25]",
        "numberOfBytes": "800"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(gameStage)27": {
        "encoding": "inplace",
        "label": "enum Bingo.gameStage",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(player)40_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Bingo.player)",
        "numberOfBytes": "32",
        "value": "t_struct(player)40_storage"
      },
      "t_mapping(t_uint256,t_struct(gameRound)67_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Bingo.gameRound)",
        "numberOfBytes": "32",
        "value": "t_struct(gameRound)67_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(gameRound)67_storage": {
        "encoding": "inplace",
        "label": "struct Bingo.gameRound",
        "members": [
          {
            "astId": 43,
            "contract": "contracts/BingoGame.sol:Bingo",
            "label": "drawing",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 46,
            "contract": "contracts/BingoGame.sol:Bingo",
            "label": "winnerAnnounced",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 48,
            "contract": "contracts/BingoGame.sol:Bingo",
            "label": "startTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 50,
            "contract": "contracts/BingoGame.sol:Bingo",
            "label": "bingo",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 54,
            "contract": "contracts/BingoGame.sol:Bingo",
            "label": "winner",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 57,
            "contract": "contracts/BingoGame.sol:Bingo",
            "label": "playersArray",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 61,
            "contract": "contracts/BingoGame.sol:Bingo",
            "label": "winningNumders",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)24_storage"
          },
          {
            "astId": 66,
            "contract": "contracts/BingoGame.sol:Bingo",
            "label": "players",
            "offset": 0,
            "slot": "29",
            "type": "t_mapping(t_address,t_struct(player)40_storage)"
          }
        ],
        "numberOfBytes": "960"
      },
      "t_struct(player)40_storage": {
        "encoding": "inplace",
        "label": "struct Bingo.player",
        "members": [
          {
            "astId": 30,
            "contract": "contracts/BingoGame.sol:Bingo",
            "label": "stage",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(gameStage)27"
          },
          {
            "astId": 34,
            "contract": "contracts/BingoGame.sol:Bingo",
            "label": "gameBoard",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)25_storage"
          },
          {
            "astId": 39,
            "contract": "contracts/BingoGame.sol:Bingo",
            "label": "gameBoardMatchs",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "864"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}