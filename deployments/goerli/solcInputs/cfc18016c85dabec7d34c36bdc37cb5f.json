{
  "language": "Solidity",
  "sources": {
    "contracts/Bingo.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.22 <0.6.0;\r\n\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract Bingo {\r\n    using SafeMath for uint256;\r\n\r\n    enum Stage {\r\n        BETTING,\r\n        REVEALING\r\n    }\r\n\r\n    struct Player {\r\n        Stage stage;\r\n        uint256 block;\r\n        uint256 bet;\r\n        uint256[] card;\r\n        uint256[] generatedNumders;\r\n        mapping(uint256 => uint256) cardsCheker;\r\n    }\r\n\r\n    uint256 public minBet = 100000;\r\n    uint256 public maxBet = 1000000000;\r\n    uint256 public payoutPerCombination = 2;\r\n    mapping(address => Player) public players;\r\n\r\n    event Bet(address player, uint256 block, uint256 bet);\r\n    event Reveal(address player, uint256[] numbers, uint256 result);\r\n\r\n    function bet() public payable {\r\n        require(msg.value >= minBet && msg.value <= maxBet);\r\n        require(players[msg.sender].stage == Stage.BETTING);\r\n        players[msg.sender] = Player(\r\n            Stage.REVEALING,\r\n            block.number,\r\n            msg.value,\r\n            new uint256[](25),\r\n            new uint256[](30)\r\n        );\r\n        emit Bet(msg.sender, block.number, msg.value);\r\n    }\r\n\r\n    function reveal() public {\r\n        require(players[msg.sender].stage == Stage.REVEALING);\r\n        uint256 result;\r\n        uint256 i;\r\n        uint256 card;\r\n        uint256 idx;\r\n        Player storage player = players[msg.sender];\r\n        bytes32 blockHashPrevious = blockhash(players[msg.sender].block);\r\n        uint256 seed = uint256(blockHashPrevious);\r\n        uint256 rand = uint256(keccak256(abi.encodePacked(seed, msg.sender)));\r\n\r\n        while (i < 25) {\r\n            card = 1 + ((rand & 255) % 75);\r\n            rand = (rand >> 8 > 0)\r\n                ? rand >> 8\r\n                : uint256(keccak256(abi.encodePacked(seed, msg.sender, i)));\r\n            idx = player.cardsCheker[card];\r\n            if (idx == 0) {\r\n                players[msg.sender].card[i] = card;\r\n                player.cardsCheker[card] = i;\r\n                i += (i == 11) ? 2 : 1;\r\n            }\r\n        }\r\n\r\n        uint256[] memory numbers = players[msg.sender].card;\r\n\r\n        rand = uint256(keccak256(abi.encodePacked(seed, address(this))));\r\n        i = 0;\r\n        card = 0;\r\n        idx = 0;\r\n\r\n        while (i < 30) {\r\n            card = 1 + ((rand & 255) % 75);\r\n            rand = (rand >> 8 > 0)\r\n                ? rand >> 8\r\n                : uint256(keccak256(abi.encodePacked(seed, address(this), i)));\r\n            player.generatedNumders[i] = card;\r\n            idx = player.cardsCheker[card];\r\n            if (player.card[idx] == card) {\r\n                players[msg.sender].card[i] = 0;\r\n                player.cardsCheker[card] = 0;\r\n            }\r\n            i++;\r\n        }\r\n\r\n        for (i = 0; i < 5; i++) {\r\n            if (\r\n                players[msg.sender].card[i * 5 + 0] == 0 &&\r\n                players[msg.sender].card[i * 5 + 1] == 0 &&\r\n                players[msg.sender].card[i * 5 + 2] == 0 &&\r\n                players[msg.sender].card[i * 5 + 3] == 0 &&\r\n                players[msg.sender].card[i * 5 + 4] == 0\r\n            ) {\r\n                result++;\r\n            }\r\n\r\n            if (\r\n                players[msg.sender].card[0 + i] == 0 &&\r\n                players[msg.sender].card[5 + i] == 0 &&\r\n                players[msg.sender].card[10 + i] == 0 &&\r\n                players[msg.sender].card[15 + i] == 0 &&\r\n                players[msg.sender].card[20 + i] == 0\r\n            ) {\r\n                result++;\r\n            }\r\n        }\r\n\r\n        if (\r\n            players[msg.sender].card[0 + i] == 0 &&\r\n            players[msg.sender].card[6] == 0 &&\r\n            players[msg.sender].card[12] == 0 &&\r\n            players[msg.sender].card[18] == 0 &&\r\n            players[msg.sender].card[24] == 0\r\n        ) {\r\n            result++;\r\n        }\r\n\r\n        if (\r\n            players[msg.sender].card[4] == 0 &&\r\n            players[msg.sender].card[8] == 0 &&\r\n            players[msg.sender].card[12] == 0 &&\r\n            players[msg.sender].card[16] == 0 &&\r\n            players[msg.sender].card[20] == 0\r\n        ) {\r\n            result++;\r\n        }\r\n\r\n        msg.sender.transfer(player.bet.mul(result).mul(payoutPerCombination));\r\n        players[msg.sender] = Player(Stage.BETTING, 0, 0, new uint256[](25), new uint256[](30));\r\n        emit Reveal(msg.sender, numbers, result);\r\n    }\r\n}\r\n"
    },
    "contracts/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.22 <0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a, \"Overflow.\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b <= a, \"Overflow.\");\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"Overflow.\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b != 0, \"Division by zero.\");\r\n        c = a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b != 0, \"Division by zero.\");\r\n        c = a % b;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}