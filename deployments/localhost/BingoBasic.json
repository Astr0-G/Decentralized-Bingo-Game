{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bingoTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "erorr__entryFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "error__drawsNotStared",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "error__exceedLimitPlayersInOneGame",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "error__gameStarted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "error__inGameAlready",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "error__notAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "error__notInGameOrClaimedRewards",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "error__winnerIsDRAWING",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "Claimed",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundCreated",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timeCreated",
          "type": "uint256"
        }
      ],
      "name": "Created",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameRound",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "playersNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[24]",
          "name": "winningNumbers",
          "type": "uint256[24]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bingoRound",
          "type": "uint256"
        }
      ],
      "name": "Drawed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundJoined",
          "type": "uint256"
        }
      ],
      "name": "Joined",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BingoToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betAmountForBINGO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameRound",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "checkWinner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameRound",
          "type": "uint256"
        }
      ],
      "name": "drawWinnerOrClaimPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameRoundNow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gameRound",
          "type": "uint256"
        }
      ],
      "name": "getPlayerGameBoard",
      "outputs": [
        {
          "internalType": "uint256[25]",
          "name": "",
          "type": "uint256[25]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameRound",
          "type": "uint256"
        }
      ],
      "name": "getRoundBingoResult",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256[24]",
          "name": "",
          "type": "uint256[24]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameRoundToJoin",
          "type": "uint256"
        }
      ],
      "name": "joinCurrentGameWithBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joinDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPlayerNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "returnBet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_joinDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_turnDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_betAmountForBINGO",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_returnBet",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_maxPlayerNum",
          "type": "uint256"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startNewGameWithBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "turnDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8d7b09e59c0380aa17674fd3909a080b4c7164824dbfa18b563d250f5f1329cd",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2897552",
    "logsBloom": "0x
    "blockHash": "0xb9bb97acc622218d0be807a61b8979c65b7617e63f8aa7126108a3f58727248e",
    "transactionHash": "0x8d7b09e59c0380aa17674fd3909a080b4c7164824dbfa18b563d250f5f1329cd",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "2897552",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "bb517958f035a2b361494a62efd1b08d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bingoTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"erorr__entryFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"error__drawsNotStared\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"error__exceedLimitPlayersInOneGame\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"error__gameStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"error__inGameAlready\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"error__notAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"error__notInGameOrClaimedRewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"error__winnerIsDRAWING\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"Claimed\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundCreated\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timeCreated\",\"type\":\"uint256\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameRound\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"playersNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[24]\",\"name\":\"winningNumbers\",\"type\":\"uint256[24]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bingoRound\",\"type\":\"uint256\"}],\"name\":\"Drawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundJoined\",\"type\":\"uint256\"}],\"name\":\"Joined\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BingoToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betAmountForBINGO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameRound\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"checkWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameRound\",\"type\":\"uint256\"}],\"name\":\"drawWinnerOrClaimPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameRoundNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gameRound\",\"type\":\"uint256\"}],\"name\":\"getPlayerGameBoard\",\"outputs\":[{\"internalType\":\"uint256[25]\",\"name\":\"\",\"type\":\"uint256[25]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameRound\",\"type\":\"uint256\"}],\"name\":\"getRoundBingoResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256[24]\",\"name\":\"\",\"type\":\"uint256[24]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameRoundToJoin\",\"type\":\"uint256\"}],\"name\":\"joinCurrentGameWithBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPlayerNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnBet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_joinDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_turnDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_betAmountForBINGO\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_returnBet\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_maxPlayerNum\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNewGameWithBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Drawed(uint256,uint256,uint256[24],uint256)\":{\"details\":\"bingoRound == 0: no Bingo; bingoRound > 0: bingo in number of rounds\"}},\"kind\":\"dev\",\"methods\":{\"checkWinner(uint256,address)\":{\"params\":{\"_gameRound\":\"the round of game id\",\"_player\":\"player address of this round of game\"}},\"drawWinnerOrClaimPrize(uint256)\":{\"details\":\"if one game is drawed, other players in this round\",\"params\":{\"_gameRound\":\"the round of game id that player joined\"}},\"getPlayerGameBoard(address,uint256)\":{\"params\":{\"_gameRound\":\"the round of game id\",\"_player\":\"player address of this round of game\"}},\"getRoundBingoResult(uint256)\":{\"params\":{\"_gameRound\":\"the round of game id\"}},\"joinCurrentGameWithBet(uint256)\":{\"details\":\"Worst case of nobody has a bingo for 4 players are about 24356551 gas within 0 - 64 as numbers that this contract generated for bingo game with 24 winning numbers generated\",\"params\":{\"_gameRoundToJoin\":\"the round of game id\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Claimed(address,uint256)\":{\"notice\":\"Event emit when a player claimed prize\"},\"Created(address,uint256,uint256)\":{\"notice\":\"Event emit when player create a new game\"},\"Drawed(uint256,uint256,uint256[24],uint256)\":{\"notice\":\"Event emit when a game is drawed\"},\"Joined(address,uint256)\":{\"notice\":\"Event emit when player joins a existing game\"}},\"kind\":\"user\",\"methods\":{\"BingoToken()\":{\"notice\":\"Each player pays an ERC20 entry fee, transferred on join\"},\"admin()\":{\"notice\":\"Admin can update the entry fee, join duration, and turn duration\"},\"betAmountForBINGO()\":{\"notice\":\"`betAmountForBINGO` sets to 1 token as default to save gas\"},\"checkWinner(uint256,address)\":{\"notice\":\"Check if player is the the winner of this game round, and returns bool with winning prize to claim\"},\"constructor\":{\"notice\":\"Deploying Bingo Token first before deploying this contract\"},\"drawWinnerOrClaimPrize(uint256)\":{\"notice\":\"Players draw winner of this game round or claim prize\"},\"getPlayerGameBoard(address,uint256)\":{\"notice\":\"Get player game board numbers in a uint256 array\"},\"getRoundBingoResult(uint256)\":{\"notice\":\"Get the Bingo result of this round of game and winning numbers\"},\"joinCurrentGameWithBet(uint256)\":{\"notice\":\"Players join current game and generate their game board\"},\"joinDuration()\":{\"notice\":\"Games have a minimum join duration before start`joinDuration` sets to 180 seconds as default to save gas\"},\"maxPlayerNum()\":{\"notice\":\"maxPlayerNum sets the max player numbers in a game, default as 4 due to out of gas problem\"},\"returnBet()\":{\"notice\":\"returnBet sets the contract whether return player entry fee or not, default as `true` for basic bingo game\"},\"setConfig(uint256,uint256,uint256,bool,uint256)\":{\"notice\":\"set config for the game, such as join durations, turn durations, bet amount for bingo game, returnBet boolean for if game returns no-winner game, max player numbers in one game\"},\"startNewGameWithBet()\":{\"notice\":\"player start a new with game board generated\"},\"turnDuration()\":{\"notice\":\"Games have a minimum turn duration between draws`turnDuration` sets to 180 seconds as default to save gas\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BasicBingoGame.sol\":\"BingoBasic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BasicBingoGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.8;\\r\\n\\r\\n/// @title Bingo Game Smart Contract\\r\\n/// @author astro Ge\\r\\n/// @notice You can use this contract for playing bingo game\\r\\n\\r\\nimport \\\"./Interface/ICER20.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\nerror erorr__entryFee();\\r\\nerror error__inGameAlready();\\r\\nerror error__drawsNotStared();\\r\\nerror error__winnerIsDRAWING();\\r\\nerror error__gameStarted();\\r\\nerror error__notInGameOrClaimedRewards();\\r\\nerror error__notAdmin();\\r\\nerror error__exceedLimitPlayersInOneGame();\\r\\n\\r\\ncontract BingoBasic {\\r\\n    /// @notice This is game stage for each player in each game round\\r\\n    enum gameStage {\\r\\n        BETTING,\\r\\n        DRAWING,\\r\\n        DARWED\\r\\n    }\\r\\n\\r\\n    /// @notice This is player struct in each game round\\r\\n    struct player {\\r\\n        gameStage stage;\\r\\n        uint256[25] gameBoard;\\r\\n        /// @notice Matched number will be set as 1 for function to know it matches, 0 means unmatch\\r\\n        mapping(uint256 => uint256) gameBoardMatchs;\\r\\n    }\\r\\n\\r\\n    struct gameRound {\\r\\n        /// @notice When one person calls function `drawWinnerOrClaimRewrads`, it will draw the winner of this round\\r\\n        bool drawing;\\r\\n        /// @notice If `winnerAnnounced` is true, other players don't have to draw instead of claiming their prize\\r\\n        bool winnerAnnounced;\\r\\n        uint256 startTime;\\r\\n        uint256 bingo;\\r\\n        /// @notice Support multiple players in a game\\r\\n        /// @notice If two or more players have their first bingo in the same round, they will share the prize pool\\r\\n        address[] winner;\\r\\n        address[] playersArray;\\r\\n        uint256[24] winningNumders;\\r\\n        mapping(address => player) players;\\r\\n    }\\r\\n\\r\\n    uint256 public gameRoundNow;\\r\\n    /// @notice Admin can update the entry fee, join duration, and turn duration\\r\\n    address public admin;\\r\\n    /// @notice Games have a minimum join duration before start\\r\\n    /// @notice `joinDuration` sets to 180 seconds as default to save gas\\r\\n    uint256 public joinDuration = 180;\\r\\n    /// @notice Games have a minimum turn duration between draws\\r\\n    /// @notice `turnDuration` sets to 180 seconds as default to save gas\\r\\n    uint256 public turnDuration = 180;\\r\\n    /// @notice Each player pays an ERC20 entry fee, transferred on join\\r\\n    address public BingoToken;\\r\\n    /// @notice `betAmountForBINGO` sets to 1 token as default to save gas\\r\\n    uint256 public betAmountForBINGO = 1000000000000000000;\\r\\n    /// @notice returnBet sets the contract whether return player entry fee or not, default as `true` for basic bingo game\\r\\n    bool public returnBet = true;\\r\\n    /// @notice maxPlayerNum sets the max player numbers in a game, default as 4 due to out of gas problem\\r\\n    uint256 public maxPlayerNum = 4;\\r\\n\\r\\n    /// @notice Support multiple concurrent games\\r\\n    mapping(uint256 => gameRound) gameRounds;\\r\\n\\r\\n    /// @notice Event emit when player create a new game\\r\\n    event Created(\\r\\n        address indexed creator,\\r\\n        uint256 indexed roundCreated,\\r\\n        uint256 indexed timeCreated\\r\\n    );\\r\\n    /// @notice Event emit when player joins a existing game\\r\\n    event Joined(address indexed player, uint256 indexed roundJoined);\\r\\n    /// @notice Event emit when a game is drawed\\r\\n    /// @dev bingoRound == 0: no Bingo; bingoRound > 0: bingo in number of rounds\\r\\n    event Drawed(\\r\\n        uint256 indexed gameRound,\\r\\n        uint256 indexed playersNum,\\r\\n        uint256[24] winningNumbers,\\r\\n        uint256 bingoRound\\r\\n    );\\r\\n    /// @notice Event emit when a player claimed prize\\r\\n    event Claimed(address indexed player, uint256 indexed Claimed);\\r\\n\\r\\n    /// @notice Only allowing one player to draw the winning numbers with time limit\\r\\n    modifier drawingWinnerCheck(uint256 _gameRound) {\\r\\n        if (block.timestamp < gameRounds[_gameRound].startTime + joinDuration + turnDuration)\\r\\n            revert error__drawsNotStared();\\r\\n        if (gameRounds[_gameRound].drawing) revert error__winnerIsDRAWING();\\r\\n\\r\\n        /// @notice Start drawing\\r\\n        gameRounds[_gameRound].drawing = true;\\r\\n        _;\\r\\n        /// @notice Stop drawing\\r\\n        gameRounds[_gameRound].drawing = false;\\r\\n    }\\r\\n\\r\\n    /// @notice Deploying Bingo Token first before deploying this contract\\r\\n    constructor(address _bingoTokenAddress) {\\r\\n        BingoToken = _bingoTokenAddress;\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    /// @notice player start a new with game board generated\\r\\n    function startNewGameWithBet() public {\\r\\n        /// @notice Send Bingo Token to this contract, and check transaction success\\r\\n        if (IERC20(BingoToken).transferFrom(msg.sender, address(this), betAmountForBINGO) != true)\\r\\n            revert erorr__entryFee();\\r\\n        /// @notice Make a new game round\\r\\n        unchecked {\\r\\n            ++gameRoundNow;\\r\\n        }\\r\\n        /// @notice Save game round Id into this function\\r\\n        uint256 gameRoundnow = gameRoundNow;\\r\\n        /// @notice Save game round start time\\r\\n        gameRounds[gameRoundnow].startTime = block.timestamp;\\r\\n        /// @notice Generating player game board for this game round\\r\\n        playerGenerateGameBoard(msg.sender, gameRoundnow);\\r\\n        emit Created(msg.sender, gameRoundnow, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /// @notice Players join current game and generate their game board\\r\\n    /// @param _gameRoundToJoin the round of game id\\r\\n    /// @dev Worst case of nobody has a bingo for 4 players are about 24356551 gas within 0 - 64 as numbers that this contract generated for bingo game with 24 winning numbers generated\\r\\n    function joinCurrentGameWithBet(uint256 _gameRoundToJoin) public {\\r\\n        /// @notice With 2 lines above being said, limit no more than 4 players in a game to limit out of gas problem\\r\\n        if (gameRounds[_gameRoundToJoin].playersArray.length + 1 > maxPlayerNum)\\r\\n            revert error__exceedLimitPlayersInOneGame();\\r\\n        (gameStage stageOfPlayer, uint256 roundStartedTimeWithDuration) = getRoundDetails(\\r\\n            _gameRoundToJoin,\\r\\n            msg.sender\\r\\n        );\\r\\n        /// @notice Player can join multiple game at the same time, but not in the same round\\r\\n        if (stageOfPlayer != gameStage.BETTING) revert error__inGameAlready();\\r\\n        /// @notice Players can not join the game after join duration\\r\\n        if (block.timestamp > roundStartedTimeWithDuration) revert error__gameStarted();\\r\\n        /// @notice Send Bingo Token to this contract, and check transaction success\\r\\n        if (IERC20(BingoToken).transferFrom(msg.sender, address(this), betAmountForBINGO) != true)\\r\\n            revert erorr__entryFee();\\r\\n        /// @notice Generating player game board for this game round\\r\\n        playerGenerateGameBoard(msg.sender, _gameRoundToJoin);\\r\\n    }\\r\\n\\r\\n    /// @notice Players draw winner of this game round or claim prize\\r\\n    /// @dev if one game is drawed, other players in this round\\r\\n    /// @param _gameRound the round of game id that player joined\\r\\n    function drawWinnerOrClaimPrize(uint256 _gameRound) public drawingWinnerCheck(_gameRound) {\\r\\n        /// @notice Cheak if stage of player in this is DRAWING to let them draw or claim\\r\\n        if (gameRounds[_gameRound].players[msg.sender].stage != gameStage.DRAWING)\\r\\n            revert error__notInGameOrClaimedRewards();\\r\\n        /// @notice Read bet amount to use for this function at beginning to save gas\\r\\n        uint256 betAmount = betAmountForBINGO;\\r\\n        uint256 prizeToSend;\\r\\n        /// @notice If winner is announced then distribute the prize to the caller\\r\\n        /// @dev This only be true when second time this function is called\\r\\n        if (gameRounds[_gameRound].winnerAnnounced == true) {\\r\\n            /// @notice If there is one of more bingo achieved, check the prize and send to the winner\\r\\n            if (gameRounds[_gameRound].bingo > 0) {\\r\\n                prizeToSend = checkPrize(_gameRound, msg.sender);\\r\\n                if (prizeToSend > 0) {\\r\\n                    IERC20(BingoToken).transfer(msg.sender, prizeToSend);\\r\\n                }\\r\\n            } else {\\r\\n                /// @notice If there no bingo achieved, refund Bingo Token player bet\\r\\n                IERC20(BingoToken).transfer(msg.sender, betAmount);\\r\\n            }\\r\\n        } else {\\r\\n            /// @notice Draw winner or winners, if two players achieved bingo in the same round, they will split the prize poll\\r\\n            /// @dev Drawing winner spend unbelievable gas amount, using a automation keeper to call this function could wave gas for player in real cases\\r\\n            /// @notice Read players's addresses to use for this function at beginning of drawing process to save gas\\r\\n            address[] memory playersArrays = gameRounds[_gameRound].playersArray;\\r\\n            /// @notice if there are more than one player in the game, then drawing start\\r\\n            if (playersArrays.length > 1) {\\r\\n                /// @notice Call `gameGenerateNumber` to generate winning numbers\\r\\n                /// @dev Will generate 24 winning numbers for players for full experience of Bingo game\\r\\n                uint256[24] memory winningNumbers = gameGenerateNumber(_gameRound);\\r\\n                uint256 BingoIndex = 24;\\r\\n                /// @notice i: i is representing players index in this game round, loop from first player to the last player\\r\\n                /// @notice j: j is representing players first bingo index in this game round\\r\\n                /// @dev j: if there is a first bingo in any players game board, we set j + 1 for the loop limit to save gas\\r\\n                /// @notice k: k is representing players game board number index, loop from 0 - 24\\r\\n                uint256 i;\\r\\n                uint256 j;\\r\\n                uint256 k;\\r\\n                do {\\r\\n                    j = 0;\\r\\n                    do {\\r\\n                        k = 0;\\r\\n                        uint256[25] memory playerGameBoard = getPlayerGameBoard(\\r\\n                            playersArrays[i],\\r\\n                            _gameRound\\r\\n                        );\\r\\n                        do {\\r\\n                            /// @notice If winning number and one of the player game board matches, set the players game board matches mapping to be 1\\r\\n                            if (winningNumbers[j] == playerGameBoard[k]) {\\r\\n                                gameRounds[_gameRound].players[playersArrays[i]].gameBoardMatchs[\\r\\n                                        k\\r\\n                                    ] = 1;\\r\\n                            }\\r\\n                            /// @notice Skip center number\\r\\n                            if (k == 11) {\\r\\n                                unchecked {\\r\\n                                    ++k;\\r\\n                                }\\r\\n                            }\\r\\n                            unchecked {\\r\\n                                ++k;\\r\\n                            }\\r\\n                            /// @notice When checking more than 5 numbers, check if this is a bingo or not\\r\\n                            if (k > 4) {\\r\\n                                /// @notice If bingo is true\\r\\n                                if (checkWinning(_gameRound, playersArrays[i])) {\\r\\n                                    /// @notice set j to be bingo round + 1 to let other player check till this round to see if there are more than one winner in this game\\r\\n                                    if (j == BingoIndex - 1) {\\r\\n                                        gameRounds[_gameRound].winner.push(playersArrays[i]);\\r\\n                                    } else {\\r\\n                                        /// @notice If new bingo round is less than the first one, clean winner array and save this new winner\\r\\n                                        gameRounds[_gameRound].winner = new address[](0);\\r\\n                                        gameRounds[_gameRound].winner.push(playersArrays[i]);\\r\\n                                    }\\r\\n                                    unchecked {\\r\\n                                        BingoIndex = j + 1;\\r\\n                                    }\\r\\n                                    /// @notice Save bingo round number into contract\\r\\n                                    gameRounds[_gameRound].bingo = j;\\r\\n                                    console.log(\\r\\n                                        \\\"First Bingo in round\\\",\\r\\n                                        j,\\r\\n                                        \\\"for player address\\\",\\r\\n                                        playersArrays[i]\\r\\n                                    );\\r\\n                                    break;\\r\\n                                }\\r\\n                            }\\r\\n                        } while (k < 25);\\r\\n                        unchecked {\\r\\n                            ++j;\\r\\n                        }\\r\\n                    } while (j < BingoIndex);\\r\\n                    unchecked {\\r\\n                        ++i;\\r\\n                    }\\r\\n                } while (i < playersArrays.length);\\r\\n                gameRounds[_gameRound].winnerAnnounced = true;\\r\\n                if (gameRounds[_gameRound].bingo > 0) {\\r\\n                    prizeToSend = checkPrize(_gameRound, msg.sender);\\r\\n                    if (prizeToSend > 0) {\\r\\n                        IERC20(BingoToken).transfer(msg.sender, prizeToSend);\\r\\n                    }\\r\\n                } else if (gameRounds[_gameRound].playersArray.length <= 1 || returnBet) {\\r\\n                    /// @notice If there no bingo achieved, refund Bingo Token player bet\\r\\n                    IERC20(BingoToken).transfer(msg.sender, betAmount);\\r\\n                }\\r\\n                emit Drawed(\\r\\n                    _gameRound,\\r\\n                    playersArrays.length,\\r\\n                    winningNumbers,\\r\\n                    gameRounds[_gameRound].bingo\\r\\n                );\\r\\n            } else if (gameRounds[_gameRound].playersArray.length <= 1 || returnBet) {\\r\\n                /// @notice If there no bingo achieved, refund Bingo Token player bet\\r\\n                IERC20(BingoToken).transfer(msg.sender, betAmount);\\r\\n            }\\r\\n        }\\r\\n        gameRounds[_gameRound].players[msg.sender].stage = gameStage.DARWED;\\r\\n        emit Claimed(msg.sender, prizeToSend);\\r\\n    }\\r\\n\\r\\n    /// @notice Player generating game board when creating or joinning a game\\r\\n    /// @dev `joinCurrentGameWithBet` & `startNewGameWithBet` will call this internal function\\r\\n    /// @param _player player's address\\r\\n    /// @param _gameRound the round of game id\\r\\n    function playerGenerateGameBoard(address _player, uint256 _gameRound) internal {\\r\\n        /// @notice Change player's stage of this game round to DRAWING\\r\\n        gameRounds[_gameRound].players[_player].stage = gameStage.DRAWING;\\r\\n        /// @notice Save player's address to game round player array\\r\\n        gameRounds[_gameRound].playersArray.push(_player);\\r\\n        uint256 i;\\r\\n        /// @notice Make a memory array for generating game board numbers in this function\\r\\n        /// @dev Saving more gas compares to directly save numbers into contract each time\\r\\n        uint256[25] memory array;\\r\\n        /// @dev Generate random number, but could be replaced by on-chain services provider, such as Chainlink\\r\\n        bytes32 blockHashPrevious = blockhash(block.number - 1);\\r\\n        uint256 seed = uint256(blockHashPrevious);\\r\\n        uint256 randomNumber = uint256(keccak256(abi.encodePacked(seed, msg.sender)));\\r\\n        /// @dev Use do while and unchecked{} to save gas.\\r\\n        do {\\r\\n            /// @notice Check if the random number bigger than 64\\r\\n            /// @dev The reason why i choose 64 is because 256 will hardly get a bingo and spent a lot of gas without a winner\\r\\n            /// @dev We could definetly choose 256 if we insist\\r\\n            randomNumber = (randomNumber >> 6 > 0)\\r\\n                ? (randomNumber >> 6) % 64\\r\\n                : (uint256(keccak256(abi.encodePacked(seed, msg.sender, i)))) % 64;\\r\\n            /// @notice Save random number into memory array\\r\\n            array[i] = randomNumber;\\r\\n            /// @notice No need to save the center game borad number\\r\\n            if (i == 11) {\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        } while (i < 25);\\r\\n        /// @notice Save generated number into player game board\\r\\n        gameRounds[_gameRound].players[_player].gameBoard = array;\\r\\n        /// @notice Set player game board matches array[12] become matched\\r\\n        gameRounds[_gameRound].players[_player].gameBoardMatchs[12] = 1;\\r\\n        emit Joined(msg.sender, _gameRound);\\r\\n    }\\r\\n\\r\\n    /// @notice Game generating winning number of this game round\\r\\n    /// @dev `drawWinnerOrClaimPrize` will call this internal function\\r\\n    /// @param _gameRound the round of game id\\r\\n    function gameGenerateNumber(uint256 _gameRound) internal returns (uint256[24] memory) {\\r\\n        /// @notice Make a memory array for generating game board numbers in this function\\r\\n        /// @dev Saving more gas compares to directly save numbers into contract each time\\r\\n        /// @dev Choose 24 winning numbers between 0 - 63 is enough for a bingo to be true, and it is also be able to make player gameboard match all bingos\\r\\n        /// @dev Worst case of nobody has a bingo for five players are about 28000000 gas within 0 - 64 as numbers that this contract generated for bingo game with 24 winning numbers generated\\r\\n        /// @dev We could definetly choose more to make every game has a Bingo if we insist\\r\\n        uint256[24] memory array;\\r\\n        uint256 i;\\r\\n        /// @dev Generate random number, but could be replaced by on-chain services provider, such as Chainlink\\r\\n        bytes32 blockHashPrevious = blockhash(block.number - 1);\\r\\n        uint256 seed = uint256(blockHashPrevious);\\r\\n        uint256 randomNumber = uint256(keccak256(abi.encodePacked(seed, msg.sender)));\\r\\n        /// @dev Use do while and unchecked{} to save gas.\\r\\n        do {\\r\\n            /// @notice Check if the random number bigger than 64\\r\\n            /// @dev The reason why choose 64 is because 256 will hardly get a bingo and spent a lot of gas without a winner\\r\\n            /// @dev We could definetly choose 256 if we insist\\r\\n            randomNumber = (randomNumber >> 6 > 0)\\r\\n                ? (randomNumber >> 6) % 64\\r\\n                : (uint256(keccak256(abi.encodePacked(seed, msg.sender, i)))) % 64;\\r\\n            /// @notice Save random number into memory array\\r\\n            array[i] = randomNumber;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        } while (i < 24);\\r\\n        /// @notice Save winning numbers into contract\\r\\n        gameRounds[_gameRound].winningNumders = array;\\r\\n        return (array);\\r\\n    }\\r\\n\\r\\n    /// @notice get player stage of this round and timestamp right after join duration ends\\r\\n    /// @dev `joinCurrentGameWithBet` will call this internal function\\r\\n    /// @param _gameRound the round of game id\\r\\n    /// @param _player player address of this round of game\\r\\n    function getRoundDetails(\\r\\n        uint256 _gameRound,\\r\\n        address _player\\r\\n    ) internal view returns (gameStage, uint256) {\\r\\n        return (\\r\\n            gameRounds[_gameRound].players[_player].stage,\\r\\n            gameRounds[_gameRound].startTime + joinDuration\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Bingo result of this round of game and winning numbers\\r\\n    /// @param _gameRound the round of game id\\r\\n    function getRoundBingoResult(\\r\\n        uint256 _gameRound\\r\\n    ) public view returns (bool, uint256[24] memory) {\\r\\n        return (gameRounds[_gameRound].bingo > 0, gameRounds[_gameRound].winningNumders);\\r\\n    }\\r\\n\\r\\n    /// @notice Get player game board numbers in a uint256 array\\r\\n    /// @param _gameRound the round of game id\\r\\n    /// @param _player player address of this round of game\\r\\n    function getPlayerGameBoard(\\r\\n        address _player,\\r\\n        uint256 _gameRound\\r\\n    ) public view returns (uint256[25] memory) {\\r\\n        return (gameRounds[_gameRound].players[_player].gameBoard);\\r\\n    }\\r\\n\\r\\n    /// @notice Check prize for the player of this game round\\r\\n    /// @dev `drawWinnerOrClaimPrize` and `checkWinner` will call this internal function\\r\\n    /// @param _gameRound the round of game id\\r\\n    /// @param _player player address of this round of game\\r\\n    function checkPrize(\\r\\n        uint256 _gameRound,\\r\\n        address _player\\r\\n    ) internal view returns (uint256 winningPrize) {\\r\\n        address[] memory winnners = gameRounds[_gameRound].winner;\\r\\n        uint256 i;\\r\\n        uint256 n;\\r\\n        do {\\r\\n            if (winnners[i] == _player) {\\r\\n                unchecked {\\r\\n                    ++n;\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        } while (i < winnners.length);\\r\\n        /// @notice If there is more than one winnier, n will be equal to 1 and times betAmountForBINGO times numbers of players divided by winners number\\r\\n        return ((n * (betAmountForBINGO * (gameRounds[_gameRound].playersArray.length))) /\\r\\n            (winnners.length));\\r\\n    }\\r\\n\\r\\n    /// @notice Check if player is the the winner of this game round, and returns bool with winning prize to claim\\r\\n    /// @param _gameRound the round of game id\\r\\n    /// @param _player player address of this round of game\\r\\n    function checkWinner(uint256 _gameRound, address _player) public view returns (bool, uint256) {\\r\\n        address[] memory winnners = gameRounds[_gameRound].winner;\\r\\n        uint256 i;\\r\\n        if (winnners.length > 0) {\\r\\n            do {\\r\\n                if (winnners[i] == _player) {\\r\\n                    uint256 prize = checkPrize(_gameRound, _player);\\r\\n                    return (true, prize);\\r\\n                }\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            } while (i < winnners.length);\\r\\n            return (false, 0);\\r\\n        } else {\\r\\n            return (false, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Check if player game board matches and retrun bool\\r\\n    /// @dev `drawWinnerOrClaimPrize` will call this internal function\\r\\n    /// @param _gameRound the round of game id\\r\\n    /// @param _player player address of this round of game\\r\\n    function checkWinning(uint256 _gameRound, address _player) internal view returns (bool) {\\r\\n        uint256 i;\\r\\n        if (\\r\\n            gameRounds[_gameRound].players[_player].gameBoardMatchs[0] == 1 &&\\r\\n            gameRounds[_gameRound].players[_player].gameBoardMatchs[6] == 1 &&\\r\\n            gameRounds[_gameRound].players[_player].gameBoardMatchs[18] == 1 &&\\r\\n            gameRounds[_gameRound].players[_player].gameBoardMatchs[24] == 1\\r\\n        ) {\\r\\n            /// @notice BINGO in [1,0,0,0,0]\\r\\n            /// @notice          [0,1,0,0,0]\\r\\n            /// @notice          [0,0,1,0,0]\\r\\n            /// @notice          [0,0,0,1,0]\\r\\n            /// @notice          [0,0,0,0,1]\\r\\n            return (true);\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            gameRounds[_gameRound].players[_player].gameBoardMatchs[4] == 1 &&\\r\\n            gameRounds[_gameRound].players[_player].gameBoardMatchs[8] == 1 &&\\r\\n            gameRounds[_gameRound].players[_player].gameBoardMatchs[16] == 1 &&\\r\\n            gameRounds[_gameRound].players[_player].gameBoardMatchs[20] == 1\\r\\n        ) {\\r\\n            /// @notice BINGO in [0,0,0,0,1]\\r\\n            /// @notice          [0,0,0,1,0]\\r\\n            /// @notice          [0,0,1,0,0]\\r\\n            /// @notice          [0,1,0,0,0]\\r\\n            /// @notice          [1,0,0,0,0]\\r\\n            return (true);\\r\\n        }\\r\\n        do {\\r\\n            if (\\r\\n                gameRounds[_gameRound].players[_player].gameBoardMatchs[i * 5 + 0] == 1 &&\\r\\n                gameRounds[_gameRound].players[_player].gameBoardMatchs[i * 5 + 1] == 1 &&\\r\\n                gameRounds[_gameRound].players[_player].gameBoardMatchs[i * 5 + 2] == 1 &&\\r\\n                gameRounds[_gameRound].players[_player].gameBoardMatchs[i * 5 + 3] == 1 &&\\r\\n                gameRounds[_gameRound].players[_player].gameBoardMatchs[i * 5 + 4] == 1\\r\\n            ) {\\r\\n                /// @notice BINGO in [1,1,1,1,1] \\u2193\\r\\n                /// @notice          [0,0,0,0,0] \\u2193\\r\\n                /// @notice          [0,0,0,0,0] \\u2193\\r\\n                /// @notice          [0,0,0,0,0] \\u2193\\r\\n                /// @notice          [0,0,0,0,0] \\u2193\\r\\n                return (true);\\r\\n            } else if (\\r\\n                gameRounds[_gameRound].players[_player].gameBoardMatchs[0 + i] == 1 &&\\r\\n                gameRounds[_gameRound].players[_player].gameBoardMatchs[5 + i] == 1 &&\\r\\n                gameRounds[_gameRound].players[_player].gameBoardMatchs[10 + i] == 1 &&\\r\\n                gameRounds[_gameRound].players[_player].gameBoardMatchs[15 + i] == 1 &&\\r\\n                gameRounds[_gameRound].players[_player].gameBoardMatchs[20 + i] == 1\\r\\n            ) {\\r\\n                /// @notice           \\u2192 \\u2192 \\u2192 \\u2192 \\u2192\\r\\n                /// @notice BINGO in [1,0,0,0,0]\\r\\n                /// @notice          [1,0,0,0,0]\\r\\n                /// @notice          [1,0,0,0,0]\\r\\n                /// @notice          [1,0,0,0,0]\\r\\n                /// @notice          [1,0,0,0,0]\\r\\n                return (true);\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        } while (i < 5);\\r\\n\\r\\n        return (false);\\r\\n    }\\r\\n\\r\\n    /// @notice set config for the game, such as join durations, turn durations, bet amount for bingo game, returnBet boolean for if game returns no-winner game, max player numbers in one game\\r\\n    function setConfig(\\r\\n        uint256 _joinDuration,\\r\\n        uint256 _turnDuration,\\r\\n        uint256 _betAmountForBINGO,\\r\\n        bool _returnBet,\\r\\n        uint256 _maxPlayerNum\\r\\n    ) public {\\r\\n        if (msg.sender != admin) revert error__notAdmin();\\r\\n        joinDuration = _joinDuration;\\r\\n        turnDuration = _turnDuration;\\r\\n        betAmountForBINGO = _betAmountForBINGO;\\r\\n        returnBet = _returnBet;\\r\\n        maxPlayerNum = _maxPlayerNum;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe12c204bff8e94f64d306de1340b45c0a8e190258d347a03ee45859fdebc167e\",\"license\":\"MIT\"},\"contracts/Interface/ICER20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x206e252911fb60d0d6a54fb657b64344c33fa237ddb8553aa668a24d1856a7c2\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260b460025560b4600355670de0b6b3a76400006005556001600660006101000a81548160ff02191690831515021790555060046007553480156200004757600080fd5b506040516200324c3803806200324c83398181016040528101906200006d919062000160565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000192565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200012882620000fb565b9050919050565b6200013a816200011b565b81146200014657600080fd5b50565b6000815190506200015a816200012f565b92915050565b600060208284031215620001795762000178620000f6565b5b6000620001898482850162000149565b91505092915050565b6130aa80620001a26000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80634fbd239b116100975780638eb2fb35116100665780638eb2fb351461025457806395f5d1fd14610270578063bdff7d88146102a0578063f851a440146102bc576100f5565b80634fbd239b146101de57806362e838ef146101fc578063744c552f1461021a578063884c0fe914610236576100f5565b806313b3da5d116100d357806313b3da5d14610140578063172bf85414610171578063227b03541461018f57806327249ee8146101c0576100f5565b806305066917146100fa5780630b3ca74d146101185780631080274914610122575b600080fd5b6101026102da565b60405161010f91906127bc565b60405180910390f35b6101206102e0565b005b61012a610452565b60405161013791906127bc565b60405180910390f35b61015a60048036038101906101559190612808565b610458565b6040516101689291906128fb565b60405180910390f35b6101796104da565b60405161018691906127bc565b60405180910390f35b6101a960048036038101906101a49190612983565b6104e0565b6040516101b79291906129c3565b60405180910390f35b6101c8610626565b6040516101d591906127bc565b60405180910390f35b6101e661062c565b6040516101f391906129fb565b60405180910390f35b610204610652565b6040516102119190612a16565b60405180910390f35b610234600480360381019061022f9190612a5d565b610665565b005b61023e610729565b60405161024b91906127bc565b60405180910390f35b61026e60048036038101906102699190612808565b61072f565b005b61028a60048036038101906102859190612ad8565b61138b565b6040516102979190612b9c565b60405180910390f35b6102ba60048036038101906102b59190612808565b61142d565b005b6102c4611636565b6040516102d191906129fb565b60405180910390f35b60035481565b60011515600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33306005546040518463ffffffff1660e01b815260040161034593929190612bb8565b602060405180830381600087803b15801561035f57600080fd5b505af1158015610373573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103979190612c04565b1515146103d0576040517f2ff987e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008081546001019190508190555060008054905042600860008381526020019081526020016000206001018190555061040a338261165c565b42813373ffffffffffffffffffffffffffffffffffffffff167f95b18bbe5373dcbe675d3ab2ae6e3888392575c51b8b8c9c3cbbdb431af1929960405160405180910390a450565b60075481565b6000610462612636565b600060086000858152602001908152602001600020600201541160086000858152602001908152602001600020600501806018806020026040519081016040528092919082601880156104ca576020028201915b8154815260200190600101908083116104b6575b5050505050905091509150915091565b60025481565b60008060006008600086815260200190815260200160002060030180548060200260200160405190810160405280929190818152602001828054801561057b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610531575b5050505050905060008082511115610615575b8473ffffffffffffffffffffffffffffffffffffffff168282815181106105b8576105b7612c31565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156105f95760006105e88787611962565b90506001819450945050505061061f565b8060010190508151811061058e5760008093509350505061061f565b6000809350935050505b9250929050565b60005481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ec576040517f9639a84e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84600281905550836003819055508260058190555081600660006101000a81548160ff021916908315150217905550806007819055505050505050565b60055481565b8060035460025460086000848152602001908152602001600020600101546107579190612c8f565b6107619190612c8f565b42101561079a576040517faf30eb6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6008600082815260200190815260200160002060000160009054906101000a900460ff16156107f5576040517ffc1cee5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016008600083815260200190815260200160002060000160006101000a81548160ff0219169083151502179055506001600281111561083857610837612ce5565b5b60086000848152602001908152602001600020601d0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1660028111156108ae576108ad612ce5565b5b146108e5576040517f6c8aeb7700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060055490506000600115156008600086815260200190815260200160002060000160019054906101000a900460ff1615151415610abe57600060086000868152602001908152602001600020600201541115610a08576109478433611962565b90506000811115610a0357600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016109af929190612d14565b602060405180830381600087803b1580156109c957600080fd5b505af11580156109dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a019190612c04565b505b610ab9565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610a65929190612d14565b602060405180830381600087803b158015610a7f57600080fd5b505af1158015610a93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab79190612c04565b505b611293565b600060086000868152602001908152602001600020600401805480602002602001604051908101604052809291908181526020018280548015610b5657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610b0c575b505050505090506001815111156111a5576000610b7286611ab2565b905060006018905060008060005b600091505b600090506000610baf878581518110610ba157610ba0612c31565b5b60200260200101518c61138b565b90505b808260198110610bc557610bc4612c31565b5b6020020151868460188110610bdd57610bdc612c31565b5b60200201511415610c70576001600860008d8152602001908152602001600020601d016000898781518110610c1557610c14612c31565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a016000848152602001908152602001600020819055505b600b821415610c80578160010191505b8160010191506004821115610f1f57610cb38b888681518110610ca657610ca5612c31565b5b6020026020010151611bcb565b15610f1e57600185610cc59190612d3d565b831415610d6257600860008c8152602001908152602001600020600301878581518110610cf557610cf4612c31565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e68565b600067ffffffffffffffff811115610d7d57610d7c612d71565b5b604051908082528060200260200182016040528015610dab5781602001602082028036833780820191505090505b50600860008d81526020019081526020016000206003019080519060200190610dd5929190612659565b50600860008c8152602001908152602001600020600301878581518110610dff57610dfe612c31565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b60018301945082600860008d815260200190815260200160002060020181905550610f196040518060400160405280601481526020017f46697273742042696e676f20696e20726f756e64000000000000000000000000815250846040518060400160405280601281526020017f666f7220706c61796572206164647265737300000000000000000000000000008152508a8881518110610f0c57610f0b612c31565b5b60200260200101516124d5565b610f28565b5b60198210610bb2575b82600101925050838210610b855782600101925085518310610b80576001600860008c815260200190815260200160002060000160016101000a81548160ff0219169083151502179055506000600860008c815260200190815260200160002060020154111561105d57610f9c8a33611962565b9650600087111561105857600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33896040518363ffffffff1660e01b8152600401611004929190612d14565b602060405180830381600087803b15801561101e57600080fd5b505af1158015611032573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110569190612c04565b505b611149565b6001600860008c8152602001908152602001600020600401805490501115806110925750600660009054906101000a900460ff165b1561114857600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338a6040518363ffffffff1660e01b81526004016110f4929190612d14565b602060405180830381600087803b15801561110e57600080fd5b505af1158015611122573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111469190612c04565b505b5b85518a7f46aef705aa56eecf91cff09c38b492bb00be62e9cc0dbb3f786810e7b875136b87600860008f815260200190815260200160002060020154604051611193929190612da0565b60405180910390a35050505050611291565b600160086000878152602001908152602001600020600401805490501115806111da5750600660009054906101000a900460ff165b1561129057600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b815260040161123c929190612d14565b602060405180830381600087803b15801561125657600080fd5b505af115801561126a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128e9190612c04565b505b5b505b600260086000868152602001908152602001600020601d0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083600281111561130d5761130c612ce5565b5b0217905550803373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a60405160405180910390a3505060006008600083815260200190815260200160002060000160006101000a81548160ff0219169083151502179055505050565b6113936126e3565b60086000838152602001908152602001600020601d0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101601980602002604051908101604052809291908260198015611420576020028201915b81548152602001906001019080831161140c575b5050505050905092915050565b600754600160086000848152602001908152602001600020600401805490506114569190612c8f565b111561148e576040517f9aa0271f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061149b8333612577565b91509150600060028111156114b3576114b2612ce5565b5b8260028111156114c6576114c5612ce5565b5b146114fd576040517f70b48ea500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80421115611537576040517f496f3b7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60011515600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33306005546040518463ffffffff1660e01b815260040161159c93929190612bb8565b602060405180830381600087803b1580156115b657600080fd5b505af11580156115ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ee9190612c04565b151514611627576040517f2ff987e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611631338461165c565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160086000838152602001908152602001600020601d0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908360028111156116d6576116d5612ce5565b5b021790555060086000828152602001908152602001600020600401829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600061175c6126e3565b600060014361176b9190612d3d565b40905060008160001c90506000813360405160200161178b929190612e34565b6040516020818303038152906040528051906020012060001c90505b6000600682901c116117f25760408233876040516020016117ca93929190612e60565b6040516020818303038152906040528051906020012060001c6117ed9190612ecc565b611804565b6040600682901c6118039190612ecc565b5b90508084866019811061181a57611819612c31565b5b602002018181525050600b851415611833578460010194505b846001019450601985106117a7578360086000888152602001908152602001600020601d0160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019060196118a6929190612706565b50600160086000888152602001908152602001600020601d0160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a016000600c815260200190815260200160002081905550853373ffffffffffffffffffffffffffffffffffffffff167f49f8fa5eee2e3f21251c2e968640dcaef35cb9332429eb059bb3cd56ddc2533d60405160405180910390a350505050505050565b600080600860008581526020019081526020016000206003018054806020026020016040519081016040528092919081815260200182805480156119fb57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116119b1575b505050505090506000805b8473ffffffffffffffffffffffffffffffffffffffff16838381518110611a3057611a2f612c31565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415611a5b578060010190505b81600101915082518210611a065782516008600088815260200190815260200160002060040180549050600554611a929190612efd565b82611a9d9190612efd565b611aa79190612f57565b935050505092915050565b611aba612636565b611ac2612636565b600080600143611ad29190612d3d565b40905060008160001c905060008133604051602001611af2929190612e34565b6040516020818303038152906040528051906020012060001c90505b6000600682901c11611b59576040823386604051602001611b3193929190612e60565b6040516020818303038152906040528051906020012060001c611b549190612ecc565b611b6b565b6040600682901c611b6a9190612ecc565b5b905080858560188110611b8157611b80612c31565b5b60200201818152505083600101935060188410611b0e578460086000898152602001908152602001600020600501906018611bbd929190612746565b508495505050505050919050565b600080600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600080815260200190815260200160002054148015611cad5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006006815260200190815260200160002054145b8015611d215750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006012815260200190815260200160002054145b8015611d955750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006018815260200190815260200160002054145b15611da45760019150506124cf565b600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006004815260200190815260200160002054148015611e845750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006008815260200190815260200160002054145b8015611ef85750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006010815260200190815260200160002054145b8015611f6c5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006014815260200190815260200160002054145b15611f7b5760019150506124cf565b5b600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600080600585611fe49190612efd565b611fee9190612c8f565b8152602001908152602001600020541480156120895750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a016000600160058561206e9190612efd565b6120789190612c8f565b815260200190815260200160002054145b80156121145750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600060026005856120f99190612efd565b6121039190612c8f565b815260200190815260200160002054145b801561219f5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600060036005856121849190612efd565b61218e9190612c8f565b815260200190815260200160002054145b801561222a5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a016000600460058561220f9190612efd565b6122199190612c8f565b815260200190815260200160002054145b156122395760019150506124cf565b600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160008360006122a09190612c8f565b81526020019081526020016000205414801561232f5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600083600561231e9190612c8f565b815260200190815260200160002054145b80156123ae5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600083600a61239d9190612c8f565b815260200190815260200160002054145b801561242d5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600083600f61241c9190612c8f565b815260200190815260200160002054145b80156124ac5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600083601461249b9190612c8f565b815260200190815260200160002054145b156124bb5760019150506124cf565b80600101905060058110611f7c5760009150505b92915050565b612571848484846040516024016124ef9493929190613021565b6040516020818303038152906040527f7c4632a4000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061260d565b50505050565b60008060086000858152602001908152602001600020601d0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1660025460086000878152602001908152602001600020600101546126029190612c8f565b915091509250929050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b604051806103000160405280601890602082028036833780820191505090505090565b8280548282559060005260206000209081019282156126d2579160200282015b828111156126d15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612679565b5b5090506126df9190612786565b5090565b604051806103200160405280601990602082028036833780820191505090505090565b8260198101928215612735579160200282015b82811115612734578251825591602001919060010190612719565b5b5090506127429190612786565b5090565b8260188101928215612775579160200282015b82811115612774578251825591602001919060010190612759565b5b5090506127829190612786565b5090565b5b8082111561279f576000816000905550600101612787565b5090565b6000819050919050565b6127b6816127a3565b82525050565b60006020820190506127d160008301846127ad565b92915050565b600080fd5b6127e5816127a3565b81146127f057600080fd5b50565b600081359050612802816127dc565b92915050565b60006020828403121561281e5761281d6127d7565b5b600061282c848285016127f3565b91505092915050565b60008115159050919050565b61284a81612835565b82525050565b600060189050919050565b600081905092915050565b6000819050919050565b612879816127a3565b82525050565b600061288b8383612870565b60208301905092915050565b6000602082019050919050565b6128ad81612850565b6128b7818461285b565b92506128c282612866565b8060005b838110156128f35781516128da878261287f565b96506128e583612897565b9250506001810190506128c6565b505050505050565b6000610320820190506129116000830185612841565b61291e60208301846128a4565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061295082612925565b9050919050565b61296081612945565b811461296b57600080fd5b50565b60008135905061297d81612957565b92915050565b6000806040838503121561299a576129996127d7565b5b60006129a8858286016127f3565b92505060206129b98582860161296e565b9150509250929050565b60006040820190506129d86000830185612841565b6129e560208301846127ad565b9392505050565b6129f581612945565b82525050565b6000602082019050612a1060008301846129ec565b92915050565b6000602082019050612a2b6000830184612841565b92915050565b612a3a81612835565b8114612a4557600080fd5b50565b600081359050612a5781612a31565b92915050565b600080600080600060a08688031215612a7957612a786127d7565b5b6000612a87888289016127f3565b9550506020612a98888289016127f3565b9450506040612aa9888289016127f3565b9350506060612aba88828901612a48565b9250506080612acb888289016127f3565b9150509295509295909350565b60008060408385031215612aef57612aee6127d7565b5b6000612afd8582860161296e565b9250506020612b0e858286016127f3565b9150509250929050565b600060199050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b612b4e81612b18565b612b588184612b23565b9250612b6382612b2e565b8060005b83811015612b94578151612b7b878261287f565b9650612b8683612b38565b925050600181019050612b67565b505050505050565b600061032082019050612bb26000830184612b45565b92915050565b6000606082019050612bcd60008301866129ec565b612bda60208301856129ec565b612be760408301846127ad565b949350505050565b600081519050612bfe81612a31565b92915050565b600060208284031215612c1a57612c196127d7565b5b6000612c2884828501612bef565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c9a826127a3565b9150612ca5836127a3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612cda57612cd9612c60565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000604082019050612d2960008301856129ec565b612d3660208301846127ad565b9392505050565b6000612d48826127a3565b9150612d53836127a3565b925082821015612d6657612d65612c60565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600061032082019050612db660008301856128a4565b612dc46103008301846127ad565b9392505050565b6000819050919050565b612de6612de1826127a3565b612dcb565b82525050565b60008160601b9050919050565b6000612e0482612dec565b9050919050565b6000612e1682612df9565b9050919050565b612e2e612e2982612945565b612e0b565b82525050565b6000612e408285612dd5565b602082019150612e508284612e1d565b6014820191508190509392505050565b6000612e6c8286612dd5565b602082019150612e7c8285612e1d565b601482019150612e8c8284612dd5565b602082019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ed7826127a3565b9150612ee2836127a3565b925082612ef257612ef1612e9d565b5b828206905092915050565b6000612f08826127a3565b9150612f13836127a3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612f4c57612f4b612c60565b5b828202905092915050565b6000612f62826127a3565b9150612f6d836127a3565b925082612f7d57612f7c612e9d565b5b828204905092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612fc2578082015181840152602081019050612fa7565b83811115612fd1576000848401525b50505050565b6000601f19601f8301169050919050565b6000612ff382612f88565b612ffd8185612f93565b935061300d818560208601612fa4565b61301681612fd7565b840191505092915050565b6000608082019050818103600083015261303b8187612fe8565b905061304a60208301866127ad565b818103604083015261305c8185612fe8565b905061306b60608301846129ec565b9594505050505056fea2646970667358221220376db276aa8510b122070f306c0e745f2ad66276931af7f717722e13adb7603464736f6c63430008080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80634fbd239b116100975780638eb2fb35116100665780638eb2fb351461025457806395f5d1fd14610270578063bdff7d88146102a0578063f851a440146102bc576100f5565b80634fbd239b146101de57806362e838ef146101fc578063744c552f1461021a578063884c0fe914610236576100f5565b806313b3da5d116100d357806313b3da5d14610140578063172bf85414610171578063227b03541461018f57806327249ee8146101c0576100f5565b806305066917146100fa5780630b3ca74d146101185780631080274914610122575b600080fd5b6101026102da565b60405161010f91906127bc565b60405180910390f35b6101206102e0565b005b61012a610452565b60405161013791906127bc565b60405180910390f35b61015a60048036038101906101559190612808565b610458565b6040516101689291906128fb565b60405180910390f35b6101796104da565b60405161018691906127bc565b60405180910390f35b6101a960048036038101906101a49190612983565b6104e0565b6040516101b79291906129c3565b60405180910390f35b6101c8610626565b6040516101d591906127bc565b60405180910390f35b6101e661062c565b6040516101f391906129fb565b60405180910390f35b610204610652565b6040516102119190612a16565b60405180910390f35b610234600480360381019061022f9190612a5d565b610665565b005b61023e610729565b60405161024b91906127bc565b60405180910390f35b61026e60048036038101906102699190612808565b61072f565b005b61028a60048036038101906102859190612ad8565b61138b565b6040516102979190612b9c565b60405180910390f35b6102ba60048036038101906102b59190612808565b61142d565b005b6102c4611636565b6040516102d191906129fb565b60405180910390f35b60035481565b60011515600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33306005546040518463ffffffff1660e01b815260040161034593929190612bb8565b602060405180830381600087803b15801561035f57600080fd5b505af1158015610373573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103979190612c04565b1515146103d0576040517f2ff987e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008081546001019190508190555060008054905042600860008381526020019081526020016000206001018190555061040a338261165c565b42813373ffffffffffffffffffffffffffffffffffffffff167f95b18bbe5373dcbe675d3ab2ae6e3888392575c51b8b8c9c3cbbdb431af1929960405160405180910390a450565b60075481565b6000610462612636565b600060086000858152602001908152602001600020600201541160086000858152602001908152602001600020600501806018806020026040519081016040528092919082601880156104ca576020028201915b8154815260200190600101908083116104b6575b5050505050905091509150915091565b60025481565b60008060006008600086815260200190815260200160002060030180548060200260200160405190810160405280929190818152602001828054801561057b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610531575b5050505050905060008082511115610615575b8473ffffffffffffffffffffffffffffffffffffffff168282815181106105b8576105b7612c31565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156105f95760006105e88787611962565b90506001819450945050505061061f565b8060010190508151811061058e5760008093509350505061061f565b6000809350935050505b9250929050565b60005481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ec576040517f9639a84e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84600281905550836003819055508260058190555081600660006101000a81548160ff021916908315150217905550806007819055505050505050565b60055481565b8060035460025460086000848152602001908152602001600020600101546107579190612c8f565b6107619190612c8f565b42101561079a576040517faf30eb6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6008600082815260200190815260200160002060000160009054906101000a900460ff16156107f5576040517ffc1cee5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016008600083815260200190815260200160002060000160006101000a81548160ff0219169083151502179055506001600281111561083857610837612ce5565b5b60086000848152602001908152602001600020601d0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1660028111156108ae576108ad612ce5565b5b146108e5576040517f6c8aeb7700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060055490506000600115156008600086815260200190815260200160002060000160019054906101000a900460ff1615151415610abe57600060086000868152602001908152602001600020600201541115610a08576109478433611962565b90506000811115610a0357600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016109af929190612d14565b602060405180830381600087803b1580156109c957600080fd5b505af11580156109dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a019190612c04565b505b610ab9565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610a65929190612d14565b602060405180830381600087803b158015610a7f57600080fd5b505af1158015610a93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab79190612c04565b505b611293565b600060086000868152602001908152602001600020600401805480602002602001604051908101604052809291908181526020018280548015610b5657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610b0c575b505050505090506001815111156111a5576000610b7286611ab2565b905060006018905060008060005b600091505b600090506000610baf878581518110610ba157610ba0612c31565b5b60200260200101518c61138b565b90505b808260198110610bc557610bc4612c31565b5b6020020151868460188110610bdd57610bdc612c31565b5b60200201511415610c70576001600860008d8152602001908152602001600020601d016000898781518110610c1557610c14612c31565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a016000848152602001908152602001600020819055505b600b821415610c80578160010191505b8160010191506004821115610f1f57610cb38b888681518110610ca657610ca5612c31565b5b6020026020010151611bcb565b15610f1e57600185610cc59190612d3d565b831415610d6257600860008c8152602001908152602001600020600301878581518110610cf557610cf4612c31565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e68565b600067ffffffffffffffff811115610d7d57610d7c612d71565b5b604051908082528060200260200182016040528015610dab5781602001602082028036833780820191505090505b50600860008d81526020019081526020016000206003019080519060200190610dd5929190612659565b50600860008c8152602001908152602001600020600301878581518110610dff57610dfe612c31565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b60018301945082600860008d815260200190815260200160002060020181905550610f196040518060400160405280601481526020017f46697273742042696e676f20696e20726f756e64000000000000000000000000815250846040518060400160405280601281526020017f666f7220706c61796572206164647265737300000000000000000000000000008152508a8881518110610f0c57610f0b612c31565b5b60200260200101516124d5565b610f28565b5b60198210610bb2575b82600101925050838210610b855782600101925085518310610b80576001600860008c815260200190815260200160002060000160016101000a81548160ff0219169083151502179055506000600860008c815260200190815260200160002060020154111561105d57610f9c8a33611962565b9650600087111561105857600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33896040518363ffffffff1660e01b8152600401611004929190612d14565b602060405180830381600087803b15801561101e57600080fd5b505af1158015611032573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110569190612c04565b505b611149565b6001600860008c8152602001908152602001600020600401805490501115806110925750600660009054906101000a900460ff165b1561114857600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338a6040518363ffffffff1660e01b81526004016110f4929190612d14565b602060405180830381600087803b15801561110e57600080fd5b505af1158015611122573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111469190612c04565b505b5b85518a7f46aef705aa56eecf91cff09c38b492bb00be62e9cc0dbb3f786810e7b875136b87600860008f815260200190815260200160002060020154604051611193929190612da0565b60405180910390a35050505050611291565b600160086000878152602001908152602001600020600401805490501115806111da5750600660009054906101000a900460ff165b1561129057600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b815260040161123c929190612d14565b602060405180830381600087803b15801561125657600080fd5b505af115801561126a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128e9190612c04565b505b5b505b600260086000868152602001908152602001600020601d0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083600281111561130d5761130c612ce5565b5b0217905550803373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a60405160405180910390a3505060006008600083815260200190815260200160002060000160006101000a81548160ff0219169083151502179055505050565b6113936126e3565b60086000838152602001908152602001600020601d0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101601980602002604051908101604052809291908260198015611420576020028201915b81548152602001906001019080831161140c575b5050505050905092915050565b600754600160086000848152602001908152602001600020600401805490506114569190612c8f565b111561148e576040517f9aa0271f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061149b8333612577565b91509150600060028111156114b3576114b2612ce5565b5b8260028111156114c6576114c5612ce5565b5b146114fd576040517f70b48ea500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80421115611537576040517f496f3b7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60011515600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33306005546040518463ffffffff1660e01b815260040161159c93929190612bb8565b602060405180830381600087803b1580156115b657600080fd5b505af11580156115ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ee9190612c04565b151514611627576040517f2ff987e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611631338461165c565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160086000838152602001908152602001600020601d0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908360028111156116d6576116d5612ce5565b5b021790555060086000828152602001908152602001600020600401829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600061175c6126e3565b600060014361176b9190612d3d565b40905060008160001c90506000813360405160200161178b929190612e34565b6040516020818303038152906040528051906020012060001c90505b6000600682901c116117f25760408233876040516020016117ca93929190612e60565b6040516020818303038152906040528051906020012060001c6117ed9190612ecc565b611804565b6040600682901c6118039190612ecc565b5b90508084866019811061181a57611819612c31565b5b602002018181525050600b851415611833578460010194505b846001019450601985106117a7578360086000888152602001908152602001600020601d0160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019060196118a6929190612706565b50600160086000888152602001908152602001600020601d0160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a016000600c815260200190815260200160002081905550853373ffffffffffffffffffffffffffffffffffffffff167f49f8fa5eee2e3f21251c2e968640dcaef35cb9332429eb059bb3cd56ddc2533d60405160405180910390a350505050505050565b600080600860008581526020019081526020016000206003018054806020026020016040519081016040528092919081815260200182805480156119fb57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116119b1575b505050505090506000805b8473ffffffffffffffffffffffffffffffffffffffff16838381518110611a3057611a2f612c31565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415611a5b578060010190505b81600101915082518210611a065782516008600088815260200190815260200160002060040180549050600554611a929190612efd565b82611a9d9190612efd565b611aa79190612f57565b935050505092915050565b611aba612636565b611ac2612636565b600080600143611ad29190612d3d565b40905060008160001c905060008133604051602001611af2929190612e34565b6040516020818303038152906040528051906020012060001c90505b6000600682901c11611b59576040823386604051602001611b3193929190612e60565b6040516020818303038152906040528051906020012060001c611b549190612ecc565b611b6b565b6040600682901c611b6a9190612ecc565b5b905080858560188110611b8157611b80612c31565b5b60200201818152505083600101935060188410611b0e578460086000898152602001908152602001600020600501906018611bbd929190612746565b508495505050505050919050565b600080600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600080815260200190815260200160002054148015611cad5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006006815260200190815260200160002054145b8015611d215750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006012815260200190815260200160002054145b8015611d955750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006018815260200190815260200160002054145b15611da45760019150506124cf565b600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006004815260200190815260200160002054148015611e845750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006008815260200190815260200160002054145b8015611ef85750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006010815260200190815260200160002054145b8015611f6c5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160006014815260200190815260200160002054145b15611f7b5760019150506124cf565b5b600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600080600585611fe49190612efd565b611fee9190612c8f565b8152602001908152602001600020541480156120895750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a016000600160058561206e9190612efd565b6120789190612c8f565b815260200190815260200160002054145b80156121145750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600060026005856120f99190612efd565b6121039190612c8f565b815260200190815260200160002054145b801561219f5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600060036005856121849190612efd565b61218e9190612c8f565b815260200190815260200160002054145b801561222a5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a016000600460058561220f9190612efd565b6122199190612c8f565b815260200190815260200160002054145b156122395760019150506124cf565b600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0160008360006122a09190612c8f565b81526020019081526020016000205414801561232f5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600083600561231e9190612c8f565b815260200190815260200160002054145b80156123ae5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600083600a61239d9190612c8f565b815260200190815260200160002054145b801561242d5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600083600f61241c9190612c8f565b815260200190815260200160002054145b80156124ac5750600160086000868152602001908152602001600020601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a01600083601461249b9190612c8f565b815260200190815260200160002054145b156124bb5760019150506124cf565b80600101905060058110611f7c5760009150505b92915050565b612571848484846040516024016124ef9493929190613021565b6040516020818303038152906040527f7c4632a4000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061260d565b50505050565b60008060086000858152602001908152602001600020601d0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1660025460086000878152602001908152602001600020600101546126029190612c8f565b915091509250929050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b604051806103000160405280601890602082028036833780820191505090505090565b8280548282559060005260206000209081019282156126d2579160200282015b828111156126d15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612679565b5b5090506126df9190612786565b5090565b604051806103200160405280601990602082028036833780820191505090505090565b8260198101928215612735579160200282015b82811115612734578251825591602001919060010190612719565b5b5090506127429190612786565b5090565b8260188101928215612775579160200282015b82811115612774578251825591602001919060010190612759565b5b5090506127829190612786565b5090565b5b8082111561279f576000816000905550600101612787565b5090565b6000819050919050565b6127b6816127a3565b82525050565b60006020820190506127d160008301846127ad565b92915050565b600080fd5b6127e5816127a3565b81146127f057600080fd5b50565b600081359050612802816127dc565b92915050565b60006020828403121561281e5761281d6127d7565b5b600061282c848285016127f3565b91505092915050565b60008115159050919050565b61284a81612835565b82525050565b600060189050919050565b600081905092915050565b6000819050919050565b612879816127a3565b82525050565b600061288b8383612870565b60208301905092915050565b6000602082019050919050565b6128ad81612850565b6128b7818461285b565b92506128c282612866565b8060005b838110156128f35781516128da878261287f565b96506128e583612897565b9250506001810190506128c6565b505050505050565b6000610320820190506129116000830185612841565b61291e60208301846128a4565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061295082612925565b9050919050565b61296081612945565b811461296b57600080fd5b50565b60008135905061297d81612957565b92915050565b6000806040838503121561299a576129996127d7565b5b60006129a8858286016127f3565b92505060206129b98582860161296e565b9150509250929050565b60006040820190506129d86000830185612841565b6129e560208301846127ad565b9392505050565b6129f581612945565b82525050565b6000602082019050612a1060008301846129ec565b92915050565b6000602082019050612a2b6000830184612841565b92915050565b612a3a81612835565b8114612a4557600080fd5b50565b600081359050612a5781612a31565b92915050565b600080600080600060a08688031215612a7957612a786127d7565b5b6000612a87888289016127f3565b9550506020612a98888289016127f3565b9450506040612aa9888289016127f3565b9350506060612aba88828901612a48565b9250506080612acb888289016127f3565b9150509295509295909350565b60008060408385031215612aef57612aee6127d7565b5b6000612afd8582860161296e565b9250506020612b0e858286016127f3565b9150509250929050565b600060199050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b612b4e81612b18565b612b588184612b23565b9250612b6382612b2e565b8060005b83811015612b94578151612b7b878261287f565b9650612b8683612b38565b925050600181019050612b67565b505050505050565b600061032082019050612bb26000830184612b45565b92915050565b6000606082019050612bcd60008301866129ec565b612bda60208301856129ec565b612be760408301846127ad565b949350505050565b600081519050612bfe81612a31565b92915050565b600060208284031215612c1a57612c196127d7565b5b6000612c2884828501612bef565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c9a826127a3565b9150612ca5836127a3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612cda57612cd9612c60565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000604082019050612d2960008301856129ec565b612d3660208301846127ad565b9392505050565b6000612d48826127a3565b9150612d53836127a3565b925082821015612d6657612d65612c60565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600061032082019050612db660008301856128a4565b612dc46103008301846127ad565b9392505050565b6000819050919050565b612de6612de1826127a3565b612dcb565b82525050565b60008160601b9050919050565b6000612e0482612dec565b9050919050565b6000612e1682612df9565b9050919050565b612e2e612e2982612945565b612e0b565b82525050565b6000612e408285612dd5565b602082019150612e508284612e1d565b6014820191508190509392505050565b6000612e6c8286612dd5565b602082019150612e7c8285612e1d565b601482019150612e8c8284612dd5565b602082019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ed7826127a3565b9150612ee2836127a3565b925082612ef257612ef1612e9d565b5b828206905092915050565b6000612f08826127a3565b9150612f13836127a3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612f4c57612f4b612c60565b5b828202905092915050565b6000612f62826127a3565b9150612f6d836127a3565b925082612f7d57612f7c612e9d565b5b828204905092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612fc2578082015181840152602081019050612fa7565b83811115612fd1576000848401525b50505050565b6000601f19601f8301169050919050565b6000612ff382612f88565b612ffd8185612f93565b935061300d818560208601612fa4565b61301681612fd7565b840191505092915050565b6000608082019050818103600083015261303b8187612fe8565b905061304a60208301866127ad565b818103604083015261305c8185612fe8565b905061306b60608301846129ec565b9594505050505056fea2646970667358221220376db276aa8510b122070f306c0e745f2ad66276931af7f717722e13adb7603464736f6c63430008080033",
  "devdoc": {
    "events": {
      "Drawed(uint256,uint256,uint256[24],uint256)": {
        "details": "bingoRound == 0: no Bingo; bingoRound > 0: bingo in number of rounds"
      }
    },
    "kind": "dev",
    "methods": {
      "checkWinner(uint256,address)": {
        "params": {
          "_gameRound": "the round of game id",
          "_player": "player address of this round of game"
        }
      },
      "drawWinnerOrClaimPrize(uint256)": {
        "details": "if one game is drawed, other players in this round",
        "params": {
          "_gameRound": "the round of game id that player joined"
        }
      },
      "getPlayerGameBoard(address,uint256)": {
        "params": {
          "_gameRound": "the round of game id",
          "_player": "player address of this round of game"
        }
      },
      "getRoundBingoResult(uint256)": {
        "params": {
          "_gameRound": "the round of game id"
        }
      },
      "joinCurrentGameWithBet(uint256)": {
        "details": "Worst case of nobody has a bingo for 4 players are about 24356551 gas within 0 - 64 as numbers that this contract generated for bingo game with 24 winning numbers generated",
        "params": {
          "_gameRoundToJoin": "the round of game id"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Claimed(address,uint256)": {
        "notice": "Event emit when a player claimed prize"
      },
      "Created(address,uint256,uint256)": {
        "notice": "Event emit when player create a new game"
      },
      "Drawed(uint256,uint256,uint256[24],uint256)": {
        "notice": "Event emit when a game is drawed"
      },
      "Joined(address,uint256)": {
        "notice": "Event emit when player joins a existing game"
      }
    },
    "kind": "user",
    "methods": {
      "BingoToken()": {
        "notice": "Each player pays an ERC20 entry fee, transferred on join"
      },
      "admin()": {
        "notice": "Admin can update the entry fee, join duration, and turn duration"
      },
      "betAmountForBINGO()": {
        "notice": "`betAmountForBINGO` sets to 1 token as default to save gas"
      },
      "checkWinner(uint256,address)": {
        "notice": "Check if player is the the winner of this game round, and returns bool with winning prize to claim"
      },
      "constructor": {
        "notice": "Deploying Bingo Token first before deploying this contract"
      },
      "drawWinnerOrClaimPrize(uint256)": {
        "notice": "Players draw winner of this game round or claim prize"
      },
      "getPlayerGameBoard(address,uint256)": {
        "notice": "Get player game board numbers in a uint256 array"
      },
      "getRoundBingoResult(uint256)": {
        "notice": "Get the Bingo result of this round of game and winning numbers"
      },
      "joinCurrentGameWithBet(uint256)": {
        "notice": "Players join current game and generate their game board"
      },
      "joinDuration()": {
        "notice": "Games have a minimum join duration before start`joinDuration` sets to 180 seconds as default to save gas"
      },
      "maxPlayerNum()": {
        "notice": "maxPlayerNum sets the max player numbers in a game, default as 4 due to out of gas problem"
      },
      "returnBet()": {
        "notice": "returnBet sets the contract whether return player entry fee or not, default as `true` for basic bingo game"
      },
      "setConfig(uint256,uint256,uint256,bool,uint256)": {
        "notice": "set config for the game, such as join durations, turn durations, bet amount for bingo game, returnBet boolean for if game returns no-winner game, max player numbers in one game"
      },
      "startNewGameWithBet()": {
        "notice": "player start a new with game board generated"
      },
      "turnDuration()": {
        "notice": "Games have a minimum turn duration between draws`turnDuration` sets to 180 seconds as default to save gas"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 65,
        "contract": "contracts/BasicBingoGame.sol:BingoBasic",
        "label": "gameRoundNow",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 68,
        "contract": "contracts/BasicBingoGame.sol:BingoBasic",
        "label": "admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 72,
        "contract": "contracts/BasicBingoGame.sol:BingoBasic",
        "label": "joinDuration",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 76,
        "contract": "contracts/BasicBingoGame.sol:BingoBasic",
        "label": "turnDuration",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 79,
        "contract": "contracts/BasicBingoGame.sol:BingoBasic",
        "label": "BingoToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 83,
        "contract": "contracts/BasicBingoGame.sol:BingoBasic",
        "label": "betAmountForBINGO",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 87,
        "contract": "contracts/BasicBingoGame.sol:BingoBasic",
        "label": "returnBet",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 91,
        "contract": "contracts/BasicBingoGame.sol:BingoBasic",
        "label": "maxPlayerNum",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 97,
        "contract": "contracts/BasicBingoGame.sol:BingoBasic",
        "label": "gameRounds",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(gameRound)63_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)24_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[24]",
        "numberOfBytes": "768"
      },
      "t_array(t_uint256)25_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[25]",
        "numberOfBytes": "800"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(gameStage)23": {
        "encoding": "inplace",
        "label": "enum BingoBasic.gameStage",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(player)36_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BingoBasic.player)",
        "numberOfBytes": "32",
        "value": "t_struct(player)36_storage"
      },
      "t_mapping(t_uint256,t_struct(gameRound)63_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BingoBasic.gameRound)",
        "numberOfBytes": "32",
        "value": "t_struct(gameRound)63_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(gameRound)63_storage": {
        "encoding": "inplace",
        "label": "struct BingoBasic.gameRound",
        "members": [
          {
            "astId": 39,
            "contract": "contracts/BasicBingoGame.sol:BingoBasic",
            "label": "drawing",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 42,
            "contract": "contracts/BasicBingoGame.sol:BingoBasic",
            "label": "winnerAnnounced",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 44,
            "contract": "contracts/BasicBingoGame.sol:BingoBasic",
            "label": "startTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 46,
            "contract": "contracts/BasicBingoGame.sol:BingoBasic",
            "label": "bingo",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 50,
            "contract": "contracts/BasicBingoGame.sol:BingoBasic",
            "label": "winner",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 53,
            "contract": "contracts/BasicBingoGame.sol:BingoBasic",
            "label": "playersArray",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 57,
            "contract": "contracts/BasicBingoGame.sol:BingoBasic",
            "label": "winningNumders",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)24_storage"
          },
          {
            "astId": 62,
            "contract": "contracts/BasicBingoGame.sol:BingoBasic",
            "label": "players",
            "offset": 0,
            "slot": "29",
            "type": "t_mapping(t_address,t_struct(player)36_storage)"
          }
        ],
        "numberOfBytes": "960"
      },
      "t_struct(player)36_storage": {
        "encoding": "inplace",
        "label": "struct BingoBasic.player",
        "members": [
          {
            "astId": 26,
            "contract": "contracts/BasicBingoGame.sol:BingoBasic",
            "label": "stage",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(gameStage)23"
          },
          {
            "astId": 30,
            "contract": "contracts/BasicBingoGame.sol:BingoBasic",
            "label": "gameBoard",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)25_storage"
          },
          {
            "astId": 35,
            "contract": "contracts/BasicBingoGame.sol:BingoBasic",
            "label": "gameBoardMatchs",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "864"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}